@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<AuthorizeView>
    <Authorized>
        Balls
    </Authorized>
</AuthorizeView>

@code {
    
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public int Id_Oferta { get; set; }

    public Vehiculo Vehiculo_Enviado {get; set;} = new();
    public Vehiculo Vehiculo_Recibido {get; set;} = new();

    public Cliente Dueño_Envia {get; set;} = new();
    public Cliente Dueño_Recibe {get; set;} = new();

    public Oferta Oferta {get; set;} = new();


    protected override async Task OnParametersSetAsync() {
        Oferta.Id = Id_Oferta;
        var responseSV = await HttpClient.PostAsJsonAsync<Oferta>("api/Oferta/GetOferta", Oferta) ?? new();
        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "El identificador de oferta es innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
        Oferta = await responseSV.Content.ReadFromJsonAsync<Oferta>() ?? new();

        Vehiculo_Enviado.Id = Oferta.ID_VehiculoEnviaOferta;
        HttpResponseMessage? responseSV_V1;
        if (Oferta.EsNavioEnvia) {
            responseSV_V1 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetNavio", Vehiculo_Enviado) ?? new();
            if (responseSV_V1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de envia innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Enviado = await responseSV_V1.Content.ReadFromJsonAsync<Maritimo>() ?? new();
        } else {
            responseSV_V1 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetVehiculo", Vehiculo_Enviado) ?? new();
            if (responseSV_V1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de envia innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Enviado = await responseSV_V1.Content.ReadFromJsonAsync<Terrestre>() ?? new();            
        }


        var responseSV2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetDueño", Vehiculo_Enviado) ?? new();
        if (responseSV2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
                
        Dueño_Envia = await responseSV2.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño_Envia.Contacto = Dueño_Envia.Contacto == "" ? "No posee información de contacto." : Dueño_Envia.Contacto;

        Vehiculo_Recibido.Id = Oferta.ID_VehiculoRecibeOferta;

        HttpResponseMessage? responseSV_V2;
        if (Oferta.EsNavioRecibe) {
            responseSV_V2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetNavio", Vehiculo_Recibido) ?? new();
            if (responseSV_V2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de recibe innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Recibido = await responseSV_V2.Content.ReadFromJsonAsync<Maritimo>() ?? new();
        } else {
            responseSV_V2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetVehiculo", Vehiculo_Recibido) ?? new();
            if (responseSV_V2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de recibe innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Recibido = await responseSV_V2.Content.ReadFromJsonAsync<Terrestre>() ?? new();
        }
        

        var responseSV4 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetDueño", Vehiculo_Recibido) ?? new();
            if (responseSV4.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }

        Dueño_Recibe = await responseSV4.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño_Recibe.Contacto = Dueño_Recibe.Contacto == "" ? "No posee información de contacto." : Dueño_Recibe.Contacto;
    }

}