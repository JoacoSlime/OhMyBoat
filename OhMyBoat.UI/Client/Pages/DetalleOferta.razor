@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<AuthorizeView>
    <Authorized>
        <Modal @ref="modal" IsScrollable="true" Size="ModalSize.ExtraLarge" />
        <div class="d-flex p-5 flex-row align-items-center justify-content-between">
            <div class="d-flex flex-column">
                @if (Vehiculo_Enviado is Maritimo) {
                    Maritimo mar = Vehiculo_Enviado as Maritimo ?? new();
                        <div class="d-flex">
                            <img class="rounded-3 m-3" src="@mar.base64imagen" alt="Imagen del vehículo" style="width:100%; height:auto; max-width: 50vh"/>
                            <div class="d-flex flex-column">
                                <h3>@mar.Tipo</h3>
                                <h4 class="mb-5">@mar.Matricula</h4>
                                <h4 class="mb-3">Eslora: @($"{mar.Eslora}m.")</h4>
                                <h4 class="mb-3">Puntal: @mar.Puntal km aproximadamente.</h4>
                                <h4 class="mb-3">Manga: @mar.Manga km aproximadamente.</h4>
                                <h4 class="mb-3">Antigüedad: @mar.Antiguedad años aproximadamente.</h4>
                                <h4 class="mb-3">Deuda: @(mar.Deuda==0? "Libre de deuda." : "$" + mar.Deuda.ToString())</h4>
                            </div>
                        </div>
                        <div class="d-flex">
                            <ul>
                                <li><h3>Info del dueño:</h3> <div class="border rounded p-3 mb-3">
                                    <h3>@Dueño_Recibe.Nombre</h3>
                                    <h4>@Dueño_Recibe.Email</h4>
                                    <h4>@Dueño_Recibe.Contacto</h4>
                                </div></li>
                                <li><h3>Descripcion:</h3> <div class="border rounded p-3 mb-3">@mar.descripcion</div></li>
                            </ul>
                        </div>
                } else {
                    Terrestre ter = Vehiculo_Enviado as Terrestre ?? new();
                    <div class="d-flex">
                        <img class="rounded-3 m-3" src="@ter.base64imagen" alt="Imagen del vehículo" style="width:100%; height:auto; max-width: 50vh"/>
                        <div class="d-flex flex-column">
                            <h3>@ter.Tipo</h3>
                            <h4>@ter.Marca @ter.Modelo @ter.Anio</h4>
                            <h4 class="mb-5">@ter.Matricula</h4>
                            <h4 class="mb-3">Antiguedad: @ter.Antiguedad años.</h4>
                            <h4 class="mb-3">Kilometraje: @ter.Kilometraje km aproximadamente.</h4>
                        </div>
                    </div>
                    <div class="d-flex">
                        <ul>
                            <li><h3>Info del dueño:</h3> <div class="border rounded p-3 mb-3">
                                <h3>@Dueño_Recibe.Nombre</h3>
                                <h4>@Dueño_Recibe.Email</h4>
                                <h4>@Dueño_Recibe.Contacto</h4>
                            </div></li>
                            <li><h3>Descripcion:</h3> <div class="border rounded p-3 mb-3">@ter.descripcion</div></li>
                        </ul>
                    </div>
                }
            </div>
            <div >
                <Button @onclick="RechazarOferta" Color="ButtonColor.Danger">Rechazar Oferta</Button>
                <Button @onclick="AceptarOferta" Color="ButtonColor.Success">Aceptar Oferta</Button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public int Id_Oferta { get; set; }

    public Vehiculo Vehiculo_Enviado {get; set;} = new();
    public Vehiculo Vehiculo_Recibido {get; set;} = new();

    public Cliente Dueño_Envia {get; set;} = new();
    public Cliente Dueño_Recibe {get; set;} = new();

    public Oferta Oferta {get; set;} = new();
    [Parameter] public Modal modal {get;set;} = default!;


    protected override async Task OnParametersSetAsync() {
        Oferta.Id = Id_Oferta;
        var responseSV = await HttpClient.PostAsJsonAsync<Oferta>("api/Oferta/GetOferta", Oferta) ?? new();
        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "El identificador de oferta es innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
        Oferta = await responseSV.Content.ReadFromJsonAsync<Oferta>() ?? new();

        Vehiculo_Enviado.Id = Oferta.ID_VehiculoEnviaOferta;
        HttpResponseMessage? responseSV_V1;
        if (Oferta.EsNavioEnvia) {
            responseSV_V1 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetNavio", Vehiculo_Enviado) ?? new();
            if (responseSV_V1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de envia innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Enviado = await responseSV_V1.Content.ReadFromJsonAsync<Maritimo>() ?? new();
        } else {
            responseSV_V1 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetVehiculo", Vehiculo_Enviado) ?? new();
            if (responseSV_V1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de envia innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Enviado = await responseSV_V1.Content.ReadFromJsonAsync<Terrestre>() ?? new();            
        }


        var responseSV2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetDueño", Vehiculo_Enviado) ?? new();
        if (responseSV2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
                
        Dueño_Envia = await responseSV2.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño_Envia.Contacto = Dueño_Envia.Contacto == "" ? "No posee información de contacto." : Dueño_Envia.Contacto;

        Vehiculo_Recibido.Id = Oferta.ID_VehiculoRecibeOferta;

        HttpResponseMessage? responseSV_V2;
        if (Oferta.EsNavioRecibe) {
            responseSV_V2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetNavio", Vehiculo_Recibido) ?? new();
            if (responseSV_V2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de recibe innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Recibido = await responseSV_V2.Content.ReadFromJsonAsync<Maritimo>() ?? new();
        } else {
            responseSV_V2 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetVehiculo", Vehiculo_Recibido) ?? new();
            if (responseSV_V2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "ID de recibe innexistente");
                await OnClickCallback.InvokeAsync();
                return;
            }
            Vehiculo_Recibido = await responseSV_V2.Content.ReadFromJsonAsync<Terrestre>() ?? new();
        }
        

        var responseSV4 = await HttpClient.PostAsJsonAsync("api/Vehiculos/GetDueño", Vehiculo_Recibido) ?? new();
            if (responseSV4.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }

        Dueño_Recibe = await responseSV4.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño_Recibe.Contacto = Dueño_Recibe.Contacto == "" ? "No posee información de contacto." : Dueño_Recibe.Contacto;
    }

    async Task RechazarOferta() {
        var responseSV = await HttpClient.PostAsJsonAsync("api/Oferta/EliminarOferta", Oferta);
        await OnClickCallback.InvokeAsync();
    }

    private async Task hideModal(){
        await modal.ShowAsync();
        await modal.HideAsync();
    }

    private async Task AceptarOferta()
    {
        var parameters = new Dictionary<string, object>();
            parameters.Add("OnClickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, hideModal));
            parameters.Add("idOferta", Oferta.Id);      
        await modal.ShowAsync<ProposeDate>(title: "Enviar Oferta", parameters: parameters);
    }
}