@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authStateProvider
@using OhMyBoat.UI.Shared.Entidades
@using OhMyBoat.UI.Shared
@using Microsoft.JSInterop
@using System
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject NavigationManager Navegador
@using System.ComponentModel.DataAnnotations




<h1>Seleccionar vehiculo para Ofertar</h1>

@if (isLoading)
{
     <p>Cargando vehiculos, por favor espere...</p>
}
else
{
 @if (MisBarcos.Count == 0 && MisRodados.Count == 0)
    {
        <p>Usted no tiene vehiculos por favor haga click en "Cerrar" para continuar.</p>
        <CardFooter class="text-end">
        <Button Size="Size.ExtraLarge" Color="ButtonColor.Success" @onclick="()=>NoHayVehiculos()">Cerrar</Button>
         </CardFooter>       
    }
    else
    {
<div class="d-flex flex-row flex-wrap">
    @foreach (var nav in MisBarcos)
    {
        <Card Class="me-4 mb-4" Style="width:auto;">
            <img class="rounded-top p-3" src="@nav.base64imagen" alt="Imagen del vehículo"
                style="width:auto; height:25vh; max-width: 75vh" />
            <CardBody>
                <CardTitle>Matrícula:</CardTitle>
                <CardText>@nav.Matricula</CardText>
                <CardTitle>Descripción:</CardTitle>
                <CardText>@(nav.descripcion != "" ? nav.descripcion : "-")</CardText>
                <CardTitle>Tipo:</CardTitle>
                <CardText>@nav.Tipo</CardText>
                <CardTitle>Dimensiones:</CardTitle>
            </CardBody>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Eslora: @nav.Eslora</li>
                <li class="list-group-item">Puntal: @nav.Puntal</li>
                <li class="list-group-item">Manga: @nav.Manga</li>
            </ul>
            <CardBody>
                <CardTitle>Deuda:</CardTitle>
                <CardText>@nav.Deuda</CardText>
                <CardTitle>Antiguedad:</CardTitle>
                <CardText>@nav.Antiguedad</CardText>
            </CardBody>
            <CardFooter class="text-end">
                <Button Size="Size.ExtraLarge" Color="ButtonColor.Success"
                @onclick="()=>OnClick(nav.Id, true)">Ofertar Navio</Button>
            </CardFooter>
        </Card>
    }
    @foreach (var vec in MisRodados)
    {
        <Card Class="me-4 mb-4" Style="width:auto;">
            <img class="rounded-top p-3" src="@vec.base64imagen" alt="Imagen del vehículo"
                style="width:auto; height:25vh; max-width: 75vh" />
            <CardBody>
                <CardTitle>Matrícula:</CardTitle>
                <CardText>@vec.Matricula</CardText>
                <CardTitle>Descripción:</CardTitle>
                <CardText>@(vec.descripcion != "" ? vec.descripcion : "-")</CardText>
                <CardTitle>Tipo:</CardTitle>
                <CardText>@vec.Tipo</CardText>
                <CardTitle>Antiguedad:</CardTitle>
                <CardText>@vec.Antiguedad</CardText>
            </CardBody>
            <CardFooter class="text-end">
                <Button Size="Size.ExtraLarge" Color="ButtonColor.Success"
                    @onclick="()=>OnClickVehiculo(vec.Id)">Ofertar Vehiculo</Button>
            </CardFooter>
        </Card>
    }
</div>
}
}

@code
{
    [Parameter] public Vehiculo? vehiculoOfertado { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    

    List<Maritimo> MisBarcos = new();
    List<Terrestre> MisRodados = new();

    private Boolean isLoading = true;


    protected override async Task OnInitializedAsync()
    {
        await RecargarLista();
    }

    private async Task RecargarLista()
    {
        var Aut = await authStateProvider.GetAuthenticationStateAsync();
        var Email = Aut.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;

        var respSV = await HttpClient.PostAsJsonAsync("api/vehiculos/ListarNaviosCliente", Email);
        MisBarcos = await respSV.Content.ReadFromJsonAsync<List<Maritimo>>() ?? new();

        var respSVeh = await HttpClient.PostAsJsonAsync("api/vehiculos/ListarVehiculosCliente", Email);
        MisRodados = await respSVeh.Content.ReadFromJsonAsync<List<Terrestre>>() ?? new();

        isLoading =false;    
        StateHasChanged();
    }

    private async Task OnClick(int patenteOfertado, bool ofertado)
    {
        var Aut = await authStateProvider.GetAuthenticationStateAsync();
        var Email = Aut.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;

        Oferta ofer = new Oferta
            {
                ID_RecibeOferta = vehiculoOfertado?.IDCliente,
                ID_EnviaOferta = Email,
                ID_VehiculoEnviaOferta = patenteOfertado,
                ID_VehiculoRecibeOferta = vehiculoOfertado?.Id ?? 0,
                EsNavioEnvia = ofertado,
                EsNavioRecibe = vehiculoOfertado?.GetType() == typeof(Maritimo),
                Estado = false

            };

        var RespuestaSvExisteUnaOferta = await HttpClient.PostAsJsonAsync<Oferta>("api/Oferta/ChekearOfertaExiste", ofer);
        if (RespuestaSvExisteUnaOferta.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Esa oferta ya existe");
            return;
        }


        var RespuestaSv = HttpClient.PostAsJsonAsync<Oferta>("api/Oferta/RegistrarOferta", ofer);
        
        await JsRuntime.InvokeVoidAsync("alert", "La oferta se ha enviado");

        await OnClickCallback.InvokeAsync();
    }



    private async Task OnClickVehiculo(int patenteOfertado)
    {
        if (vehiculoOfertado is Terrestre)
        {
            await JsRuntime.InvokeVoidAsync("alert", "la oferta debe contener al menos un navío.");
            return;         
        }
        await OnClick( patenteOfertado, false);
    }

    private async Task NoHayVehiculos()
    {        
        await OnClickCallback.InvokeAsync();
    }




}