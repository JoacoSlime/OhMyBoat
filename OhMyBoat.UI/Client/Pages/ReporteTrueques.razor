@using OhMyBoat.UI.Shared.Entidades;
@using OhMyBoat.UI.Shared;
@using Microsoft.JSInterop;
@using System;
@using System.Security.Cryptography
@using System.Text
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@inject NavigationManager Navegador;

<div class="mb-6">
    <strong>Ingrese un rango de fechas para cantidad de trueques de cada sede</strong>
    <br>
    <div class="mb-3">
        <strong>Fecha Inicial</strong>:
        <DateInput TValue="DateOnly" @bind-Value="@FechaInicio" EnableMinMax="true" Max="@FechaFin" Placeholder="Enter Date" />
    </div>
    <br>
    <div class="mb-3">
        <strong>Fecha final</strong>:
        <DateInput TValue="DateOnly" @bind-Value="@FechaFin" EnableMinMax="true" Max="@FechaHoy" Placeholder="Enter Date" />
    </div>
    <br>

    @if (error) {
        <div class="alert alert-danger" role="alert">
            <strong>Oh My Boat!</strong>, as√≠ no funcionan los rangos, ingrese una fecha de inicio menor a la fecha de fin.
        </div>
        <br>
    }

    <div>
        <Button @onclick="async () => await traerDatos()" Color="ButtonColor.Primary">Generar reporte</Button>
    </div>

    <br>
    @if (TrajeDatos) {
        @if (HayInconclusos || HayConcretados) {
            <div>
            <BarChart @ref="barChart" Width="500" Height="300"/>
            </div>
        }
        @if (HayInconclusos) {
            <div class="alert alert-info" role="alert">
                <p><strong>Inconclusos</strong></p>
                @foreach (var elemento in DiccionarioInconclusos) {                    
                    <span>@elemento.Key  :  @elemento.Value</span>
                    <br>
                }
            </div>
        }
        @if (HayConcretados) {
            <div class="alert alert-info" role="alert">
                <p><strong>Concretados</strong></p>
                
                @foreach (var elemento in DiccionarioConcretados) {                    
                    <span>@elemento.Key  :  @elemento.Value</span>
                    <br>
                }
            </div>
        }

    } else {
        <div class="alert alert-info" role="alert">
            <strong>Oh My Boat!</strong> No hay trueques registrados en ninguna sede.
        </div>
    }
</div>

@code {
    private DateOnly FechaInicio = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    private DateOnly FechaFin = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private DateOnly FechaHoy = DateOnly.FromDateTime(DateTime.Now);
    private bool TrajeDatos, HayInconclusos, HayConcretados = false;
    private bool error = false;

    private Dictionary<String, int> DiccionarioInconclusos = new();
    private Dictionary<String, int> DiccionarioConcretados = new();

    private BarChart barChart = new();
    private BarChartOptions barChartOptions = new();
    private ChartData chartData = new();
    private List<IChartDataset> chartDataSets = new();
    private List<string> dataLabels = new();


    private async Task traerDatos()
    {
        dataLabels = new();
        RangoDTO rango = new RangoDTO() { inicio = FechaInicio, fin = FechaFin };

        if (FechaInicio <= FechaFin && FechaFin <= FechaHoy) {

            error = false;

            var resp = await HttpClient.PostAsJsonAsync<RangoDTO>("api/reporte/TruequesInconclusosPorSede", rango);
            var resp_2 = await HttpClient.PostAsJsonAsync<RangoDTO>("api/reporte/TruequesConcretadosPorSede", rango);

            if (resp.IsSuccessStatusCode && resp_2.IsSuccessStatusCode) {

                DiccionarioInconclusos = await resp.Content.ReadFromJsonAsync<Dictionary<String, int>>() ?? new();
                DiccionarioConcretados = await resp_2.Content.ReadFromJsonAsync<Dictionary<String, int>>() ?? new();
                chartDataSets = new();
                List<double> conclusos = new();
                List<double> inconclusos = new();

                foreach (var tupla in DiccionarioInconclusos.OrderByDescending(d => d.Value)) {
                    dataLabels.Add(tupla.Key);
                }
                foreach (var tupla in DiccionarioInconclusos.OrderByDescending(d => d.Value))
                {
                    conclusos.Add(DiccionarioConcretados[tupla.Key]);
                    inconclusos.Add(DiccionarioInconclusos[tupla.Key]);
                }
                chartDataSets.Add(
                        new BarChartDataset()
                            {
                                Label = "Concretados",
                                Data = conclusos
                            });
                chartDataSets.Add(
                        new BarChartDataset()
                            {
                                Label = "Inconcluso",
                                Data = inconclusos
                            }
                    );

            } else {
                await JsRuntime.InvokeVoidAsync("alert", $"Error : {resp.StatusCode}");
            }

            TrajeDatos = true;
            HayInconclusos = !DiccionarioInconclusos.All(c => c.Value == 0);
            HayConcretados = !DiccionarioConcretados.All(c => c.Value == 0);          

        } else {

            HayInconclusos = false;
            HayConcretados = false;
            TrajeDatos = false;
            error = true;

        }
        StateHasChanged();
        

        chartData = new ChartData { Labels = dataLabels, Datasets = chartDataSets };
        barChartOptions = new BarChartOptions();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };
        barChartOptions.IndexAxis = "x";
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Trueques", Display = true };
        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Sedes", Display = true };

        barChartOptions.Plugins.Legend.Display = false;
        if (HayConcretados || HayInconclusos){   

            await barChart.InitializeAsync(chartData, barChartOptions);
            await barChart.UpdateAsync(chartData, barChartOptions);
        }
    }

}