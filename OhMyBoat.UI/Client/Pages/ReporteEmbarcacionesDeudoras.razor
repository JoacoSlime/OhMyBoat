@using OhMyBoat.UI.Shared.Entidades;
@using OhMyBoat.UI.Shared;
@using Microsoft.JSInterop;
@using System;
@using System.Security.Cryptography
@using System.Text
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@inject NavigationManager Navegador;






<div>
    @if (isEmpty) {
        <h2>No se pudo realizar el informe</h2>
        <p>No hay navios registrados.</p>
    } else {
        <BarChart @ref="barChart" Width="500" Height="300" />
    }
</div>


@code {
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;
    private string[]? backgroundColors;
    private List<IChartDataset> chartDataSets = default!;
    private List<string> dataLabels = default!;

    private bool isEmpty = true;
    protected override  async Task OnInitializedAsync()
    {
          
        dataLabels =  Enum.GetNames(typeof(TipoEmbarcacion)).ToList() ?? new();
        backgroundColors = ColorUtility.CategoricalTwelveColors;
        chartDataSets = await GetDataSets();
        barChart = new BarChart();
        chartData = new ChartData { Labels = dataLabels, Datasets = chartDataSets };
     
        barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
        barChartOptions.IndexAxis = "x";
       
        await barChart.InitializeAsync(chartData, barChartOptions);
       
    }




    #region Data Preparation

    private async Task<List<IChartDataset>> GetDataSets()
    {
        var sucursales = await HttpClient.GetFromJsonAsync<List<Sucursal>>("api/turnos/ObtenerSucursales");
                    
        var datasets = new List<IChartDataset>();
        foreach (Sucursal sucursal in sucursales)
        {

            var respSV = await HttpClient.PostAsJsonAsync("api/Reportes/GetReportenaviosDeudoresSucursal", sucursal);
            if (respSV.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var dataList = await respSV.Content.ReadFromJsonAsync<List<double>>() ?? new();
                isEmpty = isEmpty && dataList.All(d => d==0d);
                datasets.Add(
                    new BarChartDataset() {
                        Label = sucursal.NombreSuck,
                        Data = dataList,
                    }
                );
            }
        }
        return datasets;
    }

    private List<string> GetRandomDataBackgroundColor() {
        var colors = new List<string>();
        for (var index = 0; index < dataLabels.Count(); index++)
        {
            colors.Add(backgroundColors![index]);
        }
        return colors;
    }

    #endregion  Data Preparation
}