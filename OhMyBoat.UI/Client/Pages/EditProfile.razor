@page "/edit-profile"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@using OhMyBoat.UI.Client.Extensions;
@using OhMyBoat.UI.Shared.Entidades;
@using OhMyBoat.UI.Shared;
@using System.Security.Claims
@using System;
@inject HttpClient HttpClient
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager
@inject IJSRuntime JsRuntime;
@inject NavigationManager Navegador;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]

<div>
<div>
    <label for="nombre"><b>Nombre Completo</b></label>
    <div id="nombre-contains"> su nombre y apellido completos.</div>
    <input @bind="Nombre" type="text" placeholder="John Doe" name="nombre"  />
</div>
<div class="mb-3">
    <label for="contacto"><b>Contacto</b></label>
    <input @bind="Contacto" class="form-control" />
</div>

<div class="input-group">
    <div class="custom-file">
        <InputFile class="custom-file-input" OnChange="OnChange" accept="image/png, image/jpeg" id="inputFile" />
        <label class="custom-file-label" for="inputFile">Choose file</label>
    </div>
    @if (fileBase64 != "")
    {
        <img src="@fileBase64" />
    }
</div>

    <button class="btn btn-primary" type="submit" @onclick="GuardarCambios">Guardar Cambios</button>
</div>

@code {
    private string Nombre {get; set;} = "";
    private string Contacto {get; set;}= "";
    private string Email = ""; 
    private string fileBase64 = "";
    string message = "InputFile";
    AuthenticationState Auth;
    protected override async Task OnInitializedAsync()
    {
        Auth = await authStateProvider.GetAuthenticationStateAsync();
        this.Email = Auth.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;        
        await traerUsuario();

    }      
    async Task OnChange(InputFileChangeEventArgs e)
    {
        fileBase64 = await Utils.GetImageBase64(e.File);

        message = "subi las img para continuar";
    }
    
    private async Task traerUsuario()
    {
        
        LoginDTO auxSession = new LoginDTO();
        auxSession.Email = Email;       // es por que recibe una mierda de loginDTO
        var respuestaSV = await HttpClient.PostAsJsonAsync("api/usuario/ObtenerUsuario", auxSession);
        var cliendeTraido = await respuestaSV.Content.ReadFromJsonAsync<Usuario>(); 
        this.Nombre = cliendeTraido.Nombre;
        this.Contacto = cliendeTraido.Contacto;
        this.fileBase64 = cliendeTraido.Base64imagen;
    }

    private async Task GuardarCambios()

    {
        await JsRuntime.InvokeVoidAsync("alert", this.Email);
        await JsRuntime.InvokeVoidAsync("alert", this.Contacto);
        await JsRuntime.InvokeVoidAsync("alert", this.fileBase64);
        ActualizarUsuario  user = new ActualizarUsuario {Email = this.Email , Nombre = this.Nombre , Contacto = this.Contacto, Base64imagen = this.fileBase64};
        var respuestaSV = await HttpClient.PostAsJsonAsync("api/usuario/ActualizarUsuario", user  );       
        if (respuestaSV.StatusCode == System.Net.HttpStatusCode.OK)
        {
             await JsRuntime.InvokeVoidAsync("alert", "Cambios Realizados Con Exito");
             navManager.NavigateTo("account");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "explote");
        }
    }

}
