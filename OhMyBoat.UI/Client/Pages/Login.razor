@page "/login"
@layout LoginLayout
@inject NavigationManager Navegador

@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticacationProvider;
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@using System.Security.Cryptography;
@using System.Text
@inject IJSRuntime JsRuntime;



<div class="d-flex justify-content-center mt-5">

    <div class="col-lg-4 p-5 border">

        <div class="mb-3 text-center">
            <img src="LogoColorTransp.jpg" width="300" height="400">
        </div>

        <div class="mb-3">
            <label>Correo</label>
            <input @bind="email" class="form-control" />
        </div>

        <div class="mb-3">
            <label>Contraseña</label>
            <input @bind="contra" class="form-control" type="password"/>
        </div>

        <div class="mb-3">
            <button @onclick="iniciarSesion" class="btn btn-primary">Login</button>
        </div>

    </div>

</div>


@code {
    private string contra = "";
    private string email = "";
    


    public async Task iniciarSesion()
    {     
        if (email == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Flaco el email.");
            return;
        }
        if (contra == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Flaco la contraseña");
            return;
        }
        
        LoginDTO login = new LoginDTO();
        login.Password = Utils.HashWithSha256(contra);
        login.Email = email;
        
        var loginRespones = await HttpClient.PostAsJsonAsync<LoginDTO>("api/cuenta/Login", login);
        try
        {
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var sesionUsuario = await loginRespones.Content.ReadFromJsonAsync<SesionDTO>();
                var autenticacionEX = (AuthenticationExtension)authenticacationProvider;
                await autenticacionEX.ActualizarEstadoAutenticacion(sesionUsuario);
                Navegador.NavigateTo("/");
            }
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.VariantAlsoNegotiates){ // bloqueado
                        await JsRuntime.InvokeVoidAsync("alert", "El usuario esta bloqueado, Comuniquese con el jefe de OMB!");
            }
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired) // ta mal lo que pusiste
            {
                await JsRuntime.InvokeVoidAsync("alert", "Email o contraseña incorrectos");
            }
        }
        catch(Exception a)
        {
            await JsRuntime.InvokeVoidAsync("alert", a.ToString());
        }


    }
}
