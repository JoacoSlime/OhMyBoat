@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authStateProvider
@using OhMyBoat.UI.Shared.Entidades
@using OhMyBoat.UI.Shared
@using Microsoft.JSInterop
@using System
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject NavigationManager Navegador
@using System.ComponentModel.DataAnnotations



<h3>Publicar Navio</h3>
<html>
<div class="form_field">
    <label for="nombre"><b>matricula del Navio</b></label>
    <input @bind="matricula" type="text" placeholder="MO 122 RO" name="nombre" required />
</div>

<div class="input-group">
    <div class="custom-file">
        <InputFile class="custom-file-input" OnChange="OnChange" accept="image/png, image/jpeg" id="inputFile" />
        <label class="custom-file-label" for="inputFile">Choose file</label>
    </div>
    @if (filesBase64 != "")
    {
        <img src="@filesBase64" />
    }
</div>

<select @bind="tipoNav" name="select">
    <option selected> Crucero</option>
    <option>Catamaran</option>
    <option>Velero</option>
    <option>Lancha</option>
</select>

<div class="form_field">
    <label for="fecha de nacimiento"><b>Antiguedad del Navio</b></label>
    <input @bind="antiguedad" type="int" placeholder="15 aÃ±os"/>
</div>
<div class="form_field">
    <label for="Descripcion"><b>Descripcion del vehiculo</b></label>
    <input @bind="descripcion" type="Descipcion">
</div>
<div class="form_field">
    <label for="fecha de nacimiento"><b>Eslora del Navio(Metros)</b></label>
    <input @bind="Eslora" type="float" placeholder="7,5"/>
</div>
<div class="form_field">
    <label for="fecha de nacimiento"><b>Puntal del Navio(Metros)</b></label>
    <input @bind="Puntal" type="float" placeholder="12,12" />
</div>
<div class="form_field">
    <label for="fecha de nacimiento"><b>Manga del Navio(Metros)</b></label>
    <input @bind="Manga" type="float" placeholder="12,12" />
</div>
<div class="form_field">
    <label for="fecha de nacimiento"><b>Deuda del Navio (si es que posee)$</b></label>
    <input @bind="Deuda" type="float"placeholder="$ 12.050.678"/>
</div>
<button class="btn btn-primary" type="submit" @onclick="cargaVehiculoMaritimo"> cargar Navio</button>

</html>



@code {
    [Required]
    private string matricula { get; set; } = "";
    [Required]
    private string? base64imagen { get; set; } = "";
    [Required]
    public int antiguedad { get; set; }
    [Required]
    public float Eslora { get; set; } = 0;
    [Required]
    public float Puntal { get; set; } = 0;
    [Required]
    public float Manga { get; set; } = 0;    
    public float Deuda { get; set; } 
    
    private string? descripcion { get; set; } = "";
    [Required]
    private TipoEmbarcacion tipoNav { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    private string Email { get; set; } = "";
    string filesBase64 = "";
    string message = "InputFile";
    bool isDisabled = false;

    async Task OnChange(InputFileChangeEventArgs e)
    {
        var file = e.File; // agarra las fotos
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // le hace un resize
        var buf = new byte[resizedFile.Size]; // buffer para llenar la data de la imagen
        using (var stream = resizedFile.OpenReadStream())
        {
            await stream.ReadAsync(buf); // copia el stream a el buffer
        }
        filesBase64 = ($"data:image;base64,{Convert.ToBase64String(buf)}"); // lo convierte a base64

        message = "subi las img para continuar";
    }
    AuthenticationState Auth;
    protected override async Task OnInitializedAsync()
    {
        Auth = await authStateProvider.GetAuthenticationStateAsync();
        Email = Auth.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
    }

    private bool IsLong(string Patente)
    {
        return Patente.Length >= 10;
    }
    async private Task cargaVehiculoMaritimo(MouseEventArgs args)
    {



        if (IsLong(matricula))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Tu matricula es muy larga");
            return;
        }        
        if (matricula == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese una matricula ");
            return;
        }
        if (filesBase64 == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "El Navio necesita una imagen para ser cargado");
            return;
        }         
        if (Eslora == 0 || Eslora < 0.99)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingresa la Eslora de su navio");
            return;
        }
        if (Puntal == 0 )
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingresa la Puntal de su navio");
            return;
        }
        if (Manga == 0 || Manga < 0.99)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingresa la Manga de su navio");
            return;
        }



        Maritimo nav = new Maritimo()
            {
                Matricula = this.matricula,
                Antiguedad = this.antiguedad,
                descripcion = this.descripcion,
                Tipo = this.tipoNav,
                IDCliente = this.Email,
                base64imagen = this.filesBase64,
                Eslora= this.Eslora,
                Puntal= this.Puntal,
                Deuda= this.Deuda,
                Manga = this.Manga
            };

        var RespuestaSv = await HttpClient.PostAsJsonAsync<Maritimo>("api/Vehiculos/CargarVehiculoMaritimo", nav);

        if (RespuestaSv.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Navio Registrado Con Exito");
            await OnClickCallback.InvokeAsync(args);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "La patente del navia ya esta registrada");
        }
    }
}