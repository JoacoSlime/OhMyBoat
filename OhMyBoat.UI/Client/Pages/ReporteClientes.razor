@using OhMyBoat.UI.Shared.Entidades;
@using OhMyBoat.UI.Shared;
@using Microsoft.JSInterop;
@using System;
@using System.Security.Cryptography
@using System.Text
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@inject NavigationManager Navegador;



<div class="mb-6">
<<<<<<< HEAD
    <strong>Ingrese un rango de fechas para buscar los clientes con mas trueques (programados/concretados/inconclusos)</strong>
=======
   <strong>Ingrese un rango de fechas</strong>
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
    <br>
    <div class="mb-3">
        <strong>Inicio</strong>:
        <DateInput TValue="DateOnly" @bind-Value="@Inicio" EnableMinMax="true" Max="@Fin" Placeholder="Enter Date" />
    </div>
    <br>
    <div class="mb-3">
        <strong>Fin</strong>:
        <DateInput TValue="DateOnly" @bind-Value="@Fin" Placeholder="Enter Date" />
<<<<<<< HEAD
=======
    </div>
    <br>

    @if (error)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Oh My Boat!</strong>, parece que no entendes como funcionan los rangos, intenta ingresar una fecha de inicio menor a la fecha de fin
        </div>
        <br>
    }
   
    <div>
        <Button @onclick="async () => await traerDatos()"Color="ButtonColor.Primary">Generar reporte</Button>
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
    </div>
    <br>

<<<<<<< HEAD
    @if (error)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Oh My Boat!</strong>, parece que no entendes como funcionan los rangos, intenta ingresar una fecha de inicio menor a la fecha de fin
=======
    <br>
@if (TrajeDatos)
{
    @if (hayDatos)
    {
        <div>
            @foreach(var elemento in papaya)
            {
                <h1>@elemento.Key  :  @elemento.Value</h1>
            }
         </div>
    }
    else
    {
        
        <div class="alert alert-info" role="alert">
            <strong>Oh My Boat!</strong>, parece que no hay trueques en este rango de fechas
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
        </div>
        <br>
    }

    <div>
        <Button @onclick="async () => await traerDatos()" Color="ButtonColor.Primary">Generar reporte</Button>
    </div>

    <br>
    @if (TrajeDatos)
    {
        @if (hayDatos)
        {
            <div>
                <BarChart @ref="barChart" Width="500" Height="300" />
                <br>
                <div class="alert alert-info" role="alert">
                    Clientes : 
                    <br>
                    @foreach (var elemento in papaya)
                    {
                        <span>@elemento.Key  :  @elemento.Value @(elemento.Value == 1 ? "trueque" : "trueques")</span>
                        <br>
                    }
                </div>
            </div>
        }
        else
        {

            <div class="alert alert-info" role="alert">
                <strong>Oh My Boat!</strong>, parece que no hay trueques en este rango de fechas
            </div>
        }

    }
</div>




<<<<<<< HEAD
@code {
    private DateOnly Inicio = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    private DateOnly Fin = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private bool TrajeDatos, hayDatos = false;
=======
@code{
    private DateOnly Inicio = DateOnly.FromDateTime(DateTime.Now.AddDays(-1));
    private DateOnly Fin = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private bool TrajeDatos, hayDatos=false;
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
    private bool error = false;

    private Dictionary<String, int> papaya = new();

<<<<<<< HEAD
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;


    private async Task traerDatos()
    {
        RangoDTO rango = new RangoDTO() { inicio = Inicio, fin = Fin };
        var labels = new List<string>();
        var datos = new List<double>();
        var datasets = new List<IChartDataset>();


        if (Inicio <= Fin)
        {
            error = false;
            // await JsRuntime.InvokeVoidAsync("alert", $"inicio : {rango.inicio}/n fin {rango.fin}");
=======
    private async Task traerDatos()
    {
        RangoDTO rango = new RangoDTO() { inicio = Inicio, fin = Fin };
        if(Inicio <= Fin){
            error = false;
            await JsRuntime.InvokeVoidAsync("alert", $"inicio : {rango.inicio}/n fin {rango.fin}");
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
            var resp = await HttpClient.PostAsJsonAsync<RangoDTO>("api/reporte/ReporteCliente", rango);
            if (resp.IsSuccessStatusCode)
            {
                papaya = await resp.Content.ReadFromJsonAsync<Dictionary<String, int>>() ?? new();
<<<<<<< HEAD

                {
                    labels.Add(coso.Key);
                    datos.Add(coso.Value);
                }

=======
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Error : {resp.StatusCode}");
            }
            TrajeDatos = true;
<<<<<<< HEAD
            hayDatos = !papaya.All(c => c.Value == 0);
            StateHasChanged();

=======
            hayDatos = papaya.Count() >= 1;
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)
        }
        else
        {
            hayDatos = false;
            TrajeDatos = false;
            error = true;
        }
<<<<<<< HEAD
        var dataset1 = new BarChartDataset()
            {
                Data = datos,
                BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
                BorderWidth = new List<double> { 0 },
            };
        datasets.Add(dataset1);

        chartData = new ChartData { Labels = labels, Datasets = datasets };

        barChartOptions = new BarChartOptions();
        barChartOptions.Responsive = true;
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
        barChartOptions.IndexAxis = "y";

        barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Cantidad Trueques", Display = true };
        barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Email clientes", Display = true };

        barChartOptions.Plugins.Legend.Display = false;


        await barChart.InitializeAsync(chartData, barChartOptions);
        await barChart.UpdateAsync(chartData, barChartOptions);

=======
>>>>>>> 78180c9 (Hay filtro funcional por fecha gente pero si fuera bueno)

    }


}