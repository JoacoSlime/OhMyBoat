@page "/register"

@using OhMyBoat.UI.Shared.Entidades;
@using Microsoft.JSInterop;
@using System;
@using System.Security.Cryptography
@using System.Text
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@inject NavigationManager Navegador;

<html>
    <h1>Crear cuenta</h1>
    <p>Por favor complete sus datos.</p>
    <hr>
    <div class="form_field">
        <label for="email"><b>E-mail</b></label>
        <input @bind="Email" type="text" placeholder="email@example.com" name="email" required asp-for="Email"/>
    </div>
    <div class="form_field">
        <label for="nombre"><b>Nombre Completo</b></label>
        <div id="nombre-contains"> Ingrese su nombre y apellido completos.</div>
        <input @bind="Nombre" type="text" placeholder="John Doe" name="nombre" required/> 
    </div>
    <div class="form_field">
        <div id="password-constraints"> La contraseña debe contener al menos 8 caracteres.</div>
        <div id="password-constraints_2"> Además, debe contener al menos un caracter especial, una mayúscula y dos números.</div>
        <label for="psw"><b>Contraseña</b></label>
        <input @bind="Password" type="password" placeholder="*******" name="psw" required/>
    </div>
    <div class="form_field">
        <label for="fecha de nacimiento"><b>Seleccione su fecha de nacimiento</b></label>
        <input @bind="FechaNac" type="datetime-local" id="Test_DatetimeLocal"/>
        <button class="btn btn-primary" type="submit" @onclick="Registrarse">Registrarse</button>
    </div>
</html>

@code{

    private DateTime FechaNac { get; set; } = DateTime.Now;
    private TimeSpan EighteenYearSpan = new TimeSpan(6574,5, 0, 0, 0);
    private bool MayorDeEdad { get ; set ; } = true; 
    private string Email { get; set; } = "";
    private string Nombre { get; set; } = "";
    private string Password { get; set; } = "";
    private bool IsMayusc(char c){
        return (c >= 'A' && c <= 'Z');
    }
    private bool HasNum(string password){
        char[] characters = password.ToCharArray();
        int numCounter = 0;
        foreach (char c in characters){
            if (char.IsNumber(c)){
                numCounter ++;
            }
        }
        return numCounter > 1;
    }
    private bool IsSymbol(char c){
        String specials = "!?¿¡#$%&/=+-*_@.,";
        return specials.Contains(c);
    }
    private bool IsLong(string password){
        return password.Length >= 8;
    }
    private bool IsValidPassword(string password){
        return
        IsLong(password) && 
        HasNum(password) &&
        password.Any(c => IsMayusc(c)) && 
        password.Any(c => IsSymbol(c));
    }

    static string HashWithSha256(string ActualData)
    {
        using (SHA256 s = SHA256.Create())
        {
            byte[] bytes = s.ComputeHash(Encoding.UTF8.GetBytes(ActualData));
            StringBuilder b = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                b.Append(bytes[i].ToString("x2"));
            }
            return b.ToString();
        }
    }
        private bool IsValidEmail(string mail){
        if (mail.Length - mail.Replace("@", "").Length == 1 && 
        (mail.Substring(mail.Length - 4).Equals(".com") || 
        mail.Substring(mail.Length - 7).Equals(".com.ar") ||
        mail.Substring(mail.Length - 3).Equals(".me")) ){
            return true;
        };
        return false;
    }
    private string passhashed = "";

    async private void Registrarse() {

        if (Email == "") {
            await JsRuntime.InvokeVoidAsync("alert", "Flaco el email.");
            return;
        }
        if (!IsValidEmail(Email)) {
            await JsRuntime.InvokeVoidAsync("alert", "Ingrese un correo electrónico válido.");
            return;
        }
        if (Nombre == "") {
            await JsRuntime.InvokeVoidAsync("alert", "Flaco el nombre.");
            return;
        }
        if ((DateTime.Now - FechaNac) <= EighteenYearSpan) {
            await JsRuntime.InvokeVoidAsync("alert", "Debes ser mayor de edad para crear una cuenta");
            return;
        }   
        if (!IsValidPassword(Password)) {
            await JsRuntime.InvokeVoidAsync("alert", "Tu contraseña no es lo suficientemente segura.\nComo mínimo debe tener 8 caracteres, y contener al menos un caracter especial, una mayúscula y dos números");
            return;
        }

        passhashed = HashWithSha256(Password);

        Cliente cliente = new Cliente() { Nombre=this.Nombre, Email=this.Email, Password=passhashed};


        await JsRuntime.InvokeVoidAsync("alert", "Instancie algo, mando coso a la api");


        var respuestaSV = await HttpClient.PostAsJsonAsync<Cliente>("api/usuario/Registrar", cliente);

        await JsRuntime.InvokeVoidAsync("alert", respuestaSV.StatusCode.ToString());
        if (respuestaSV.StatusCode == System.Net.HttpStatusCode.OK){
            await JsRuntime.InvokeVoidAsync("alert", "Usuario registrado con exito");
            Navegador.NavigateTo("/");
        }
        
        if (respuestaSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired) // ya registrado

        {
            await JsRuntime.InvokeVoidAsync("alert", "El email ya esta registrado, ingrese otro email");
        }

        //mandar el cliente a registro

    }
}
