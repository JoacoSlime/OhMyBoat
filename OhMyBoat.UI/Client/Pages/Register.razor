@page "/register"
@layout LoginLayout

@using OhMyBoat.UI.Shared.Entidades
@using OhMyBoat.UI.Shared
@using Microsoft.JSInterop
@using System
@using System.Security.Cryptography
@using System.Text
@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager NavManager;

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @{NavManager.NavigateTo("",true);}
            <h1>No.</h1>
        </Authorized>
        <NotAuthorized>
            <div class="d-flex flex-column justify-content-center m-5 p-5 border">
                <div class="mb-3 text-center">
                    <a href="/"><img src="LogoColorTransp.jpg" style="width: max-content; height: 25vh;"></a>
                    <h1>Crear cuenta</h1>
                </div>
                <div class="mb-3">
                    <label for="email"><h3>E-mail</h3></label>
                    <input @bind="Email" class="form-control" type="text" placeholder="email@example.com" name="email" required asp-for="Email"/>
                </div>
                <div class="mb-3">
                    <label for="nombre"><h3>Nombre Completo</h3></label>
                    <input @bind="Nombre" class="form-control mb-2" type="text" placeholder="John Doe" name="nombre" required/> 
                    <div class="ms-4" id="nombre-contains"> Ingrese su nombre y apellido completos.</div>
                </div>
                <div class="mb-3">
                    <label for="psw"><h3>Contraseña</h3></label>
                    <input @bind="Password" class="form-control mb-2" type="password" placeholder="*******" name="psw" required/>
                    <div class="ms-4" id="password-constraints"> La contraseña debe contener al menos 8 caracteres un caracter especial, una mayúscula y dos números.</div>
                </div>
                <div class="mb-5">
                    <label for="fecha de nacimiento"><h3>Seleccione su fecha de nacimiento</h3></label>
                    <input @bind="FechaNac" class="form-control" type="date"  max="@today" id="Test_Date"/>
                </div>
                <div class="d-flex justify-content-center">
                    <button class="btn btn-primary btn-lg" type="submit" @onclick="Registrarse">Registrarse</button>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>



@code{
    private string today = DateTime.Now.ToString("yyyy-MM-dd"); // no puedo nacer ma►4ana mi rey es lo que se me ocurrio capas existe otra cosa mas linda -slds
    [Required]
    private DateTime FechaNac { get; set; } = DateTime.Now;
    [Required]
    private string Email { get; set; } = "";
    [Required]
    private string Nombre { get; set; } = "";
    [Required]
    private string Password { get; set; } = "";

    private string Base64imagen {get; set;} = "";

    private bool MayorDeEdad { get ; set ; } = true; 
    private TimeSpan EighteenYearSpan = new TimeSpan(6574,5, 0, 0, 0);

    
    private string passhashed = "";
    private bool IsValidEmail(string a) => true;
    async private void Registrarse() {

        if (!Utils.IsValidEmail(Email)) {
            await JsRuntime.InvokeVoidAsync("alert", "Ingrese un correo electrónico válido.");
            return;
        }
        if ((DateTime.Now - FechaNac) <= EighteenYearSpan) {
            await JsRuntime.InvokeVoidAsync("alert", "Debes ser mayor de edad para crear una cuenta");
            return;
        }   
        if (!Utils.IsValidPassword(Password)) {
            await JsRuntime.InvokeVoidAsync("alert", "Tu contraseña no es lo suficientemente segura.\nComo mínimo debe tener 8 caracteres, y contener al menos un caracter especial, una mayúscula y dos números");
            return;
        }
        if (this.Nombre == "") {
            await JsRuntime.InvokeVoidAsync("alert", "Ingrese su nombre");
        return;
        }
        if (Utils.HasNum(Nombre))
        {
             await JsRuntime.InvokeVoidAsync("alert", "Tu nombre no puede contener numeros");
            return;
        }

        passhashed = Utils.HashWithSha256(Password);

        Cliente cliente = new Cliente() { Nombre=this.Nombre, Email=this.Email, Password=passhashed, Base64imagen = this.Base64imagen}; 


        var respuestaSV = await HttpClient.PostAsJsonAsync<Cliente>("api/cuenta/RegistrarCliente", cliente);

        //await JsRuntime.InvokeVoidAsync("alert", respuestaSV.StatusCode.ToString());
        if (respuestaSV.StatusCode == System.Net.HttpStatusCode.OK){
            await JsRuntime.InvokeVoidAsync("alert", "Usuario registrado con exito");
            NavManager.NavigateTo("/");
        }
        
        if (respuestaSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired) // ya registrado

        {
            await JsRuntime.InvokeVoidAsync("alert", "El email ya esta registrado, ingrese otro email");
        }

        if (respuestaSV.StatusCode == (System.Net.HttpStatusCode)418) // email taba mal

        {
            await JsRuntime.InvokeVoidAsync("alert", "Email inválido");
        }

        //mandar el cliente a registro

    }
}
