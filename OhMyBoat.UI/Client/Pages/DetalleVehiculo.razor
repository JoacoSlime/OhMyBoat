@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@inject NavigationManager Navegador

<AuthorizeView>
    <Authorized>

        <Modal @ref="modal" IsScrollable="true" Size="ModalSize.Large" />
        

        <div class="d-flex flex-column">
            <div class="d-flex">
                <img class="rounded-3 m-3" src="@Vehiculo.base64imagen" alt="Imagen del vehículo" style="width:100%; height:auto; max-width: 50vh"/>
                <div class="d-flex flex-column">
                    <h3>@Vehiculo.Tipo</h3>
                    <h4>@Vehiculo.Marca @Vehiculo.Modelo @Vehiculo.Anio</h4>
                    <h4 class="mb-5">@Vehiculo.Matricula</h4>
                    <h4 class="mb-3">Antiguedad: @Vehiculo.Antiguedad años.</h4>
                    <h4 class="mb-3">Kilometraje: @Vehiculo.Kilometraje km aproximadamente.</h4>
                </div>
            </div>
            <div class="d-flex">
                <ul>
                    <li><h3>Info del dueño:</h3> <div class="border rounded p-3 mb-3">
                        <h3>@Dueño.Nombre</h3>
                        <h4>@Dueño.Email</h4>
                        <h4>@Dueño.Contacto</h4>
                    </div></li>
                    <li><h3>Descripcion:</h3> <div class="border rounded p-3 mb-3">@Vehiculo.descripcion</div></li>
                </ul>
            </div>
            <div class="d-flex justify-content-end">
                <AuthorizeView Roles="cliente" Context="clientContext">
                    <Authorized Context="clientContext">
                        <Button Size="Size.ExtraLarge" Color="ButtonColor.Success" @onclick="()=>EnviarOferta()"  >Hacer oferta</Button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public int Id { get; set; }
    public Terrestre Vehiculo {get; set;} = new();
    public Cliente Dueño {get; set;} = new();
    private Modal modal = default!;


    protected override async Task OnParametersSetAsync() {
        Vehiculo.Id = Id;
        var responseSV = await HttpClient.PostAsJsonAsync<Terrestre>("api/Vehiculos/GetVehiculo", Vehiculo) ?? new();
        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Id innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
        Vehiculo = await responseSV.Content.ReadFromJsonAsync<Terrestre>() ?? new();

        responseSV = await HttpClient.PostAsJsonAsync<Vehiculo>("api/Vehiculos/GetDueño", Vehiculo) ?? new();
            if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();
            return;
        }
        Dueño = await responseSV.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño.Contacto = Dueño.Contacto == "" ? "No posee información de contacto." : Dueño.Contacto;
    }



    private async Task hideModal(){
        await modal.ShowAsync();
        await modal.HideAsync();
    }

        private async Task EnviarOferta()
    {
        Vehiculo vec = new Vehiculo() {IDCliente = this.Vehiculo.IDCliente , Matricula = this.Vehiculo.Matricula,  Id = this.Id};
        var parameters = new Dictionary<string, object>();
            parameters.Add("OnClickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, hideModal));
            parameters.Add("vehiculoOfertado" , vec);      
        await modal.ShowAsync<Offers>(title: "Enviar Oferta", parameters: parameters);
    }
}