@page "/list-truques"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]

@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime

<div> 

    @if(ReporteTrueques.Count() == 0){
        <h4> No hay trueques </h4>
    }else{

            <Grid @ref="grid"
                TItem="ReporteTrueque"
                Class="table table-hover table-bordered table-striped"
                Data="ReporteTrueques"
                AllowFiltering="true"
                PageSize="10"
                Responsive="true"
                AllowSorting="true">

                <GridColumn TItem="ReporteTrueque" HeaderText="Fecha del turno" PropertyName="Fechaturno" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending" SortKeySelector="@(item => item.FechaTurno)">
                    @context.FechaTurno
                </GridColumn>
            <GridColumn TItem="ReporteTrueque" HeaderText="Sede" PropertyName="Sucursal" SortKeySelector="@(item => item.Sucursal)">
                    @context.Sucursal
                </GridColumn>
            <GridColumn TItem="ReporteTrueque" HeaderText="Maritimo" PropertyName="MaritimoId" SortKeySelector="@(item => item.MaritimoId)">
                    @context.MaritimoId
                </GridColumn>
            <GridColumn TItem="ReporteTrueque" HeaderText="Matricula 2" PropertyName="VehiculoId" SortKeySelector="@(item => item.VehiculoId)">
                    @context.VehiculoId
                </GridColumn>
            <GridColumn TItem="ReporteTrueque" HeaderText="Concretado" PropertyName="Concreto" SortKeySelector="@(item => item.Concreto)">
                 <div>
                    @if(@context.Concreto == null) {
                        <button @onclick="() => ConcretarTrueque(context)" class="btn btn-outline-success">Marcar como concretado</button>
                        <button @onclick="() => InconclusarTrueque(context)" class="btn btn-outline-danger">Marcar como inconcluso</button>                        
                    } else if(@context.Concreto ?? true) {
                        <span class="text-success">Concretado</span>
                    } else {
                        <span class="text-danger">Inconcluso</span>
                    }
                </div>
                </GridColumn>
        </Grid>
    }



</div>



@code {

    private BlazorBootstrap.Grid<ReporteTrueque> grid = default!;
    private List<Trueque> Trueques = new();
    private List<Turno> Turnos = new();
    private List<ReporteTrueque> ReporteTrueques = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadTrueques();
    }
    private async Task InconclusarTrueque(ReporteTrueque reporte)
    {
        reporte.Concreto = false;
        var respuesta = await HttpClient.PostAsJsonAsync<ReporteTrueque>("api/trueques/ActualizarEstadoTrueque", reporte);
        if (respuesta.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Se ha marcado el trueque como inconcluso");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Exploto la api, error :{respuesta.StatusCode}");
        }
        StateHasChanged();
    }

    private async Task ConcretarTrueque(ReporteTrueque reporte)
    {
        reporte.Concreto = true;
        var respuesta = await HttpClient.PostAsJsonAsync<ReporteTrueque>("api/trueques/ActualizarEstadoTrueque", reporte);
        if (respuesta.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Se ha concretado el intercambio y se saldo la deuda");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Exploto la api, error :{respuesta.StatusCode}");
        }
        StateHasChanged();
    }


    private async Task LoadTrueques() {
        Trueques = await HttpClient.GetFromJsonAsync<List<Trueque>>("api/trueques/ListarTrueques") ?? new();
        Turnos = await HttpClient.GetFromJsonAsync<List<Turno>>("api/turnos/ListarTurnos") ?? new();
        var Sucursales = await HttpClient.GetFromJsonAsync<List<Sucursal>>("api/turnos/ObtenerSucursales") ?? new();
        
        foreach (Turno t in Turnos)
        {
            ReporteTrueque rt = new();

            rt.FechaTurno = t.FechaTurno;
            var nombre_sede = Sucursales.Where( s => s.Id == t.SucursalId).FirstOrDefault();
            if (nombre_sede != null){
                rt.Sucursal = nombre_sede.NombreSuck;
            }
            if (t.TruequeId != null){
                rt.IdTrueque = (int) t.TruequeId;
            }

            var trueque = Trueques.Where(t => t.Id == rt.IdTrueque).FirstOrDefault();
            if (trueque != null){
                rt.MaritimoId = trueque.MaritimoId;
                rt.VehiculoId = trueque.VehiculoId;
                rt.Concreto = trueque?.Concreto;
            }
            //sacar el trueque que me dara -> id_vehiculo_1 y id_vehiculo_2 para hacer el boton ver detalle vehiculo p/ c/ u/
            
            ReporteTrueques.Add(rt);
        }
    }

    private async Task SwitchConcretar(Trueque trueque) {
        var RespuestaSV = await HttpClient.PostAsJsonAsync("api/turnos/SwitchConcretar", trueque);
        
        if (RespuestaSV.IsSuccessStatusCode)
        {
            await LoadTrueques();
            StateHasChanged();
        } else {
            await JsRuntime.InvokeVoidAsync("alert", "El trueque no fue encontrado.");
        }
    }
}