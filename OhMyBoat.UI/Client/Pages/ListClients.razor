@page "/list-clients"
@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "jefe,empleado")]


<h1>Lista de clientes</h1>

<Grid @ref="grid"
    TItem="Cliente"
    Class="table table-hover table-bordered table-striped"
    Data="clientes"
    AllowFiltering="true"
    PageSize="10"
    Responsive="true"
    AllowSorting="true">

    <GridColumn TItem="Cliente" HeaderText="Id" PropertyName="Id" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" IsDefaultSortColumn="true" SortDirection="SortDirection.Ascending" SortKeySelector="@(item => item.Id)">
        @context.Id
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Nombre" PropertyName="Nombre" SortKeySelector="@(item => item.Nombre)">
        @context.Nombre
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Email" PropertyName="Email" SortKeySelector="@(item => item.Email)">
        @context.Email
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Contacto" PropertyName="Contacto" SortKeySelector="@(item => item.Contacto)">
        @context.Contacto
    </GridColumn>
    <GridColumn TItem="Cliente" HeaderText="Bloqueado" PropertyName="Bloqueado" SortKeySelector="@(item => item.Bloqueado)">
        @if(context.Bloqueado) {
            <Button Color="ButtonColor.Danger" @onclick="(async () =>await SwitchUserBlock(context))">Bloqueado</Button>
        } else {
            <Button Color="ButtonColor.Success" @onclick="(async () =>await SwitchUserBlock(context))">Desbloqueado</Button>
        }
    </GridColumn>

</Grid>

@code {
    private BlazorBootstrap.Grid<Cliente> grid = default!;
    private List<Cliente> clientes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync() {
        clientes = await ((HttpClient)HttpClient).GetFromJsonAsync<List<Cliente>>("api/Usuario/ListarClientes");
    }

    private async Task SwitchUserBlock(Cliente cliente) {
        var RespuestaSV = await HttpClient.PostAsJsonAsync("api/Cuenta/SwitchUserBlock", cliente);
        
        if (RespuestaSV.IsSuccessStatusCode)
        {
            await LoadClientsAsync();
            StateHasChanged();
        } else {
            await JsRuntime.InvokeVoidAsync("alert", "El cliente no fue encontrado.");
        }
    } 
}
