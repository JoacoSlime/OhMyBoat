@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authStateProvider
@using OhMyBoat.UI.Shared.Entidades
@using OhMyBoat.UI.Shared
@using Microsoft.JSInterop
@using System
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject NavigationManager Navegador
@using System.ComponentModel.DataAnnotations



<div class="d-flex flex-column justify-content-center p-5">
    <div class="mb-3">
        <h1>Publicar Vehículo</h1>
    </div>
    <div class="mb-3">
        <label class="form-label" for="nombre"><h3>Patente del Vehículo</h3></label>
        <input class="form-control" @bind="matricula" type="text" placeholder="MO 122 RO" name="nombre" required />
    </div>

    <div class="mb-3">
        <div class="custom-file">
            <label class="form-label" for="inputFile"><h3>Choose file</h3></label>
            <InputFile class="form-control"  OnChange="OnChange" accept="image/png, image/jpeg" id="inputFile"/>
        </div>
        @if (filesBase64 != "")
        {
            <div class="d-flex justify-content-center">
                <img class="mt-3 border rounded p-5 bg-grey" style="width:100%;height:max-content;" src="@filesBase64" />
            </div>
        }
    </div>

    <div class="mb-3">
        <label class="form-label" for="select"><h3>Tipo</h3></label>
        <select class="form-control" @bind="tipoVec" name="select">
            <option selected>Auto</option>
            <option>Camioneta</option>
            <option>Moto</option>
        </select>
    </div>
    <div class="mb-3">
        <label class="form-label" for="fecha de nacimiento"><h3>Marca del vehiculo</h3></label>
        <input class="form-control" @bind="marca" type="int" placeholder="Toyota" required />
    </div>
    <div class="mb-3">
        <label class="form-label" for="fecha de nacimiento"><h3>Modelo del vehiculo</h3></label>
        <input class="form-control" @bind="modelo" type="text" placeholder="Hilux" required />
    </div>
    <div class="mb-3">
        <label class="form-label" for="fecha de nacimiento"><h3>Año del modelo</h3></label>
        <input class="form-control" placeholder="2010" @bind="anio" type="int" required />
    </div>
    <div class="mb-3">
        <label class="form-label" for="fecha de nacimiento"><h3>Kilometraje</h3></label>
        <input class="form-control" placeholder="1200" @bind="kilometraje" type="int" required />
    </div>
    <div class="mb-3">
        <label class="form-label" for="fecha de nacimiento"><h3>Antiguedad del Vehiculo</h3></label>
        <input class="form-control" placeholder="14" @bind="antiguedad" type="int" required />
    </div>
    <div class="mb-3">
        <label class="form-label" for="Descripcion"><h3>Descripcion del vehiculo (opcional)</h3></label>
        <input class="form-control" @bind="descripcion" placeholder="Con poco uso." type="String" required>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" type="submit" @onclick="cargaVehiculoterrrestre"> Publicar vehiculo</button>
    </div>
</div>

@code {
    [Required]
    private string matricula { get; set; } = "";
    [Required]
    private int? anio { get; set; }
    [Required]
    private string? descripcion { get; set; } = "";
    [Required] 
    private string? marca { get; set; } = "";
    [Required] 
    private string? modelo { get; set; } = "";
    [Required]
    private int? kilometraje { get; set; }
    [Required] 
    private int? antiguedad { get; set; }
    [Required]
    private TipoVehiculo tipoVec { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    private string Email { get; set; } = "";
    string filesBase64 = "";
    string message = "InputFile";
    bool isDisabled = false;
    async Task OnChange(InputFileChangeEventArgs e)
    {
        if (e.File.ContentType.Equals("image/jpeg" ) || (e.File.ContentType.Equals("image/png" ))) // chequeo que sea un formato de imagen valido
        if (await Utils.IsValidImageFormat(e.File))  // los jfif pasan el chequeo de arriba por eso este chequeo // si te jode arreglalo vos gil -slds
        {
            var file = e.File; // agarra las fotos            
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // le hace un resize
            var buf = new byte[resizedFile.Size]; // buffer para llenar la data de la imagen
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copia el stream a el buffer
            }
            filesBase64 = ($"data:image;base64,{Convert.ToBase64String(buf)}"); // lo convierte a base64

            message = "subi las img para continuar";
        }
        else{
            await JsRuntime.InvokeVoidAsync("alert", "formato de imagen no soportado");
            this.filesBase64 = "formato";
        }
    }

    AuthenticationState Auth;
    protected override async Task OnInitializedAsync()
    {
        Auth = await authStateProvider.GetAuthenticationStateAsync();
        this.Email = Auth.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
    }


    private bool IsLong(string Patente)
    {
        return Patente.Length >= 13;
    }
    async private Task cargaVehiculoterrrestre(MouseEventArgs args)
    {
        if (IsLong(matricula))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Tu patente es demasiado grande.");
            return;
        }
        if (matricula == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese una patente.");
            return;
        }
        if (filesBase64 == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "El Vehiculo necesita una imagen para ser cargado.");
            return;
        }
        if (filesBase64 == "formato")
        {
            await JsRuntime.InvokeVoidAsync("alert", "La imagen que cargo tiene un formato no soportado.\nAsegurese que el formato sea \".png\" o \".jpg\"  ");
            return;
        }
        if (marca == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese la marca del vehiculo.");
            return;
        }
        if (modelo == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese la modelo del vehiculo.");
            return;
        }
        if (anio == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese el año del vehiculo.");
            return;
        }
        if (antiguedad == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese la antiguedad del vehiculo.");
            return;
        } 
        if (kilometraje == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese el kilometraje del vehiculo.");
            return;
        }
        if (anio < 500)
        {
            await JsRuntime.InvokeVoidAsync("alert", "El año del vehículo es demasiado antiguo.");
            return;
        }
        if (antiguedad < 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "La antiguedad del vehículo no puede ser negativa.");
            return;
        } 
        if (kilometraje < 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "La antiguedad del vehículo no puede ser negativa.");
            return;
        }
        Terrestre vec = new Terrestre()
            {
                Matricula = this.matricula,
                Antiguedad = this.antiguedad??0,
                descripcion = this.descripcion,
                Tipo = this.tipoVec,
                IDCliente = this.Email,
                base64imagen = this.filesBase64,
                Kilometraje = this.kilometraje??0,
                Marca = this.marca,
                Modelo = this.modelo
            };

        var RespuestaSv = await HttpClient.PostAsJsonAsync<Terrestre>("api/Vehiculos/CargarVehiculoTerrestre", vec);

        if (RespuestaSv.StatusCode == System.Net.HttpStatusCode.OK)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Vehiculo Registrado Con Exito");
            await OnClickCallback.InvokeAsync(args);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "La patente del vehículo ya está registrada.");
        }
    }
}
