@page "/received-offers"

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject AuthenticationStateProvider authStateProvider;
@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@using System.Security.Claims
@inject NavigationManager NavManager

<AuthorizeView Roles="cliente">
    <Authorized>
        <h1>Mis Ofertas Recibidas</h1>

        @if (ReceivedOffers.Count == 0)
        {
            <p>Usted no tiene ninguna oferta enviada aún</p>
        }else{
            @foreach (var ofer in ReceivedOffers ) {
                    <CardText>@ofer.PatenteVehiculoEnviaOferta</CardText>
                    <CardText>@ofer.PatenteVehiculoRecibeOferta</CardText>  
                    
                    <Button Size="Size.Large" Color="ButtonColor.Success" @onclick="()=>aceptarOferta()">Aceptar Ofertar</Button>
                    <Button Size="Size.Large" Color="ButtonColor.Danger" @onclick="()=>rechazarOferta(ofer)">rechazar Ofertar</Button>                                

            }
            }
        }

        <div class="d-flex flex-column p-4 border rounded">
            @foreach (var vo in VehiculosOfertas ) {
                <div class="mb-me-4 mb-4 p-4 border rounded">
                    <div class="d-flex flex-row align-items-center justify-content-between" Style="width:auto;">
                        <div class="flex-fill">
                            <h1>
                                <h2>@vo.Item2.Nombre</h2>
                                <img class="me-5" style="border-radius: 100%; width: 15vh; height: auto;" src="@vo.Item2.Base64imagen"/>
                            </h1>
                        </div>
                        <div class="flex-fill">
                            <h1>Ofrece:</h1>
                            <div>
                                <img class="rounded-3 m-3" src="@vo.Item4.base64imagen" alt="" style="width:100%; height:auto; max-width: 50vh"/>
                            </div>
                            <h2>
                                Tipo
                            </h2>
                            <h2>
                                Algo, Algo, Algo
                            </h2>
                        </div>
                        <div class="flex-fill">
                            <Icon Name="IconName.ArrowRight" Size="IconSize.x1"></Icon>
                        </div>
                        <div class="flex-fill">
                            <h1>A cambio de:</h1>
                            <div>
                                <img class="rounded-3 m-3" src="@vo.Item3.base64imagen" alt="" style="width:100%; height:auto; max-width: 50vh"/>
                            </div>
                            <h2>
                                Tipo
                            </h2>
                            <h2>
                                Algo, Algo, Algo
                            </h2>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end flex-row">
                        <Button Color="ButtonColor.Primary" class="position-relative end-0 ms-3">Ver detalle</Button>
                        <Button Color="ButtonColor.Success" class="position-relative end-0 ms-3">Aceptar</Button>
                        <Button Color="ButtonColor.Danger" class="position-relative end-0 ms-3">Rechazar</Button>
                    </div>
                </div>
            }
            </div>
        }
    </Authorized>
    <NotAuthorized>
       @{NavManager.NavigateTo("/",true);} 
    </NotAuthorized>
</AuthorizeView>

@code {

/*
    
    Nombre ofrece:                                                  A cambio de:

    (Foto de perfil     (foto vehiculoEnviaOferta)         --->     (foto vehiculoRecibeOferta) 
    del que envia       TipoVehiculo, Marca, Modelo, Año            TipoVehiculo, Marca, Modelo, Año
    una oferta)

   [VER DETALLE OFERTA]

*/

    private Modal modal = default!;
    private Modal DetalleModal = default!;

    List<Oferta> ReceivedOffers = new();

    List<(Oferta,Usuario,Vehiculo,Vehiculo)> VehiculosOfertas = new();

    List<Usuario> ClienteOfertante = new();

    protected override async Task OnInitializedAsync()
    {
        await RecargarLista();
    }

    private async Task RecargarLista()
    {
        var Aut = await authStateProvider.GetAuthenticationStateAsync();
        var MyEmail = Aut.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;


        Usuario us = new Usuario() {Email = MyEmail};
        var respSV = await HttpClient.PostAsJsonAsync("api/Oferta/ListarOfertasRecibidas", us);
        ReceivedOffers = await respSV.Content.ReadFromJsonAsync<List<Oferta>>() ?? new();

        VehiculosOfertas.Clear();

        foreach (Oferta o in ReceivedOffers)
        {
            Vehiculo VehiculoRecibido = new Vehiculo() { Matricula = o.PatenteVehiculoRecibeOferta};
            var resp1 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetVehiculoPatente", VehiculoRecibido) ?? new();
            if (resp1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Matricula innexistente");
                return;
            }

           
            var recibe = await resp1.Content.ReadFromJsonAsync<Vehiculo>() ?? new();



            Vehiculo VehiculoEnviado= new Vehiculo() { Matricula = o.PatenteVehiculoEnviaOferta};           
            var resp2 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetVehiculoPatente", VehiculoEnviado) ?? new();
            if (resp2.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Matricula innexistente");
                return;
            }
            var envia = await resp2.Content.ReadFromJsonAsync<Vehiculo>() ?? new();

            var resp3 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetDueño", envia) ?? new();
            if (resp3.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
                await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
                return;
            }

            var ofertante = await resp3.Content.ReadFromJsonAsync<Usuario>() ?? new();

            ofertante.Base64imagen = (ofertante.Base64imagen != "" ? ofertante.Base64imagen : "./user.png");
            VehiculosOfertas.Add((o, ofertante, recibe, envia));
        }

        StateHasChanged();
    }


    private async Task aceptarOferta()
    {
        NavManager.NavigateTo("/propose-date",true);
    }

    private async Task rechazarOferta(Oferta ofer)
    {
        var response = await HttpClient.PostAsJsonAsync<Oferta>("api/Oferta/EliminarOferta", ofer);
        RecargarLista();
    }

    private async Task closeModal()
    {
        await modal.ShowAsync();      // https://github.com/vikramlearning/blazorbootstrap/issues/393
        await modal.HideAsync();
        await RecargarLista();
    }
    private async Task hideModal(){
        await DetalleModal.ShowAsync();
        await DetalleModal.HideAsync();
    }
    
}