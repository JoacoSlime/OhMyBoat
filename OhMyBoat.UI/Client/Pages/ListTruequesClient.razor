@page "/list-truques-cliente"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject AuthenticationStateProvider authStateProvider
@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@inject NavigationManager Navegador
@using System.Security.Claims
<AuthorizeView Roles="cliente" Context="OuterContext">
    <Authorized Context="OuterContext">
<div> 

    @if(ReporteTrueques.Count() == 0){
        <h4> No hay trueques concretados</h4>
    }else{

            <Grid @ref="grid"
                TItem="ReporteTrueque"
                Class="table table-hover table-bordered table-striped"
                Data="ReporteTrueques"
                AllowFiltering="true"
                PageSize="10"
                Responsive="true"
                AllowSorting="true">

                <GridColumn TItem="ReporteTrueque" HeaderText="Fecha del turno" PropertyName="FechaTurno" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending" SortKeySelector="@(item => item.FechaTurno)">
                    @context.FechaTurno.ToString("yyyy/MM/dd hh:mm")
                </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderText="Sede" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" PropertyName="Sucursal" SortKeySelector="@(item => item.Sucursal)">
                    @context.Sucursal
                </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderText="Matricula 1" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center"  PropertyName="Patente_VehiculoRecibeOferta" SortKeySelector="@(item => item.Patente_VehiculoRecibeOferta )">
                    @context.Patente_VehiculoRecibeOferta
                </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderText="Tipo Vehiculo" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center"  PropertyName="EsNavioRecibe" SortKeySelector="@(item => item.EsNavioRecibe )">
                   @if(context.EsNavioRecibe)
                   {
                        <p>Navio</p>
                   }   
                   else
                   {
                        <p>Terrestre</p>
                   }
                   
            </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderText="Matricula 2" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center"  PropertyName="Patente_VehiculoEnviaOferta" SortKeySelector="@(item => item.Patente_VehiculoEnviaOferta )">
                    @context.Patente_VehiculoEnviaOferta
            </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >
                        <button @onclick="() => verDetalle(context)" class="btn btn-primary">Ver Detalle</button>
                    </GridColumn>
                    <GridColumn TItem="ReporteTrueque" HeaderText="Concretado" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center"  PropertyName="Estado" SortKeySelector="@(item => item.Estado)">
                        <span>@context.Estado</span>
                </GridColumn>
        </Grid>
    }
</div>
    </Authorized>
    <NotAuthorized Context="OuterContext">
        @{Navegador.NavigateTo("/");}
    </NotAuthorized>
</AuthorizeView>


@code {

    private BlazorBootstrap.Grid<ReporteTrueque> grid = default!;

    private List<ReporteTrueque> ReporteTrueques = new();
    protected override async Task OnInitializedAsync()
    {
        await LoadTrueques();
    }

    private async Task LoadTrueques() 
    {
        var Auth = await authStateProvider.GetAuthenticationStateAsync();
        var  ema = Auth.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
        LoginDTO necesitoEstoSinoExplotaElBack = new LoginDTO { Email = ema };

        var respSV = await HttpClient.PostAsJsonAsync("api/Trueques/GetReporteCliente", necesitoEstoSinoExplotaElBack);
        ReporteTrueques = await respSV.Content.ReadFromJsonAsync<List<ReporteTrueque>>() ?? new();
    }

    private void verDetalle(ReporteTrueque reporte)
   
    {
        // aca haces lo del modal y tenes todos los datos que se te canten desde reporte, un salu2
    }




    }
