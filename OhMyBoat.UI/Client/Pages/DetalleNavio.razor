@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@inject NavigationManager Navegador
@inject AuthenticationStateProvider authStateProvider
@using System.Security.Claims

<AuthorizeView>
    <Authorized>

        <Modal @ref="modal" IsScrollable="true" Size="ModalSize.Large" />        

        <div class="d-flex flex-column">
            <div class="d-flex">
                <img class="rounded-3 m-3" src="@Navio.base64imagen" alt="Imagen del vehículo" style="width:100%; height:auto; max-width: 50vh"/>
                <div class="d-flex flex-column">
                    <h3>@Navio.Tipo</h3>
                    <h4 class="mb-5">@Navio.Matricula</h4>
                    <h4 class="mb-3">Eslora: @($"{Navio.Eslora}m.")</h4>
                    <h4 class="mb-3">Puntal: @Navio.Puntal m aproximadamente.</h4>
                    <h4 class="mb-3">Manga: @Navio.Manga m aproximadamente.</h4>
                    <h4 class="mb-3">Antigüedad: @Navio.Antiguedad años aproximadamente.</h4>
                    <h4 class="mb-3">Deuda: @deuda</h4>
                </div>
            </div>
            <div class="d-flex">
                <ul>
                    <li><h3>Info del dueño:</h3> <div class="border rounded p-3 mb-3">
                        <h3>@Dueño.Nombre</h3>
                        <h4>@Dueño.Email</h4>
                        <h4>@Dueño.Contacto</h4>
                    </div></li>
                    <li><h3>Descripcion:</h3> <div class="border rounded p-3 mb-3">@Navio.descripcion</div></li>
                </ul>
            </div>
                <AuthorizeView Roles="cliente" Context="clientContext">
                    <Authorized Context="clientContext">
                        @if (!isSameClient) {
                            <div class="d-flex justify-content-end">
                            <Button Size="Size.ExtraLarge" Color="ButtonColor.Success" @onclick="()=>EnviarOferta()"  >Hacer oferta</Button>
                            <Button Color="ButtonColor.Warning" @onclick="()=>DenunciarPublicacion()" > Denunciar publicacion </Button>
                            </div>

                        }
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Roles="jefe" Context="adminContext">
                    <Authorized Context="adminContext">
                        <div class="d-flex flex-row justify-content-between align-items-center text-center">
                            <h3>Cantidad de denuncias: @cantidadDenuncias</h3>
                            <div>
                                <Button Size="Size.ExtraLarge" Color="ButtonColor.Danger" @onclick="async ()=> await BloquearUsuario()">Bloquear usuario</Button>
                                <Button Size="Size.ExtraLarge" Color="ButtonColor.Warning" @onclick="async ()=> await EliminarPublicacion()">Eliminar publicación</Button>
                                <Button Size="Size.ExtraLarge" Color="ButtonColor.Primary" @onclick="async ()=> await IgnorarDenuncias()">Ignorar denuncias</Button>
                            </div>
                        </div>
                    </Authorized>
                </AuthorizeView>
        </div>
        <AuthorizeView Roles="jefe" Context="blockContext">
            <Authorized Context="blockContext">
                <Button Color="ButtonColor.Danger" @onclick="(async() => await BloquearUsuario(Dueño))">Bloquear Usuario</Button>
            </Authorized>
        </AuthorizeView>
    </Authorized>
</AuthorizeView>

@code 
{
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    [Parameter] public int Id { get; set; }
    public Maritimo Navio {get; set;} = new();
    public Cliente Dueño {get; set;} = new();
    [Parameter] public Modal modal { get; set; } = default!;

    public String deuda {get; set;} = "";
    public bool isSameClient = true;
    private int cantidadDenuncias = 0;


    protected override async Task OnParametersSetAsync() {

        Navio.Id = Id;
        var responseSV = await HttpClient.PostAsJsonAsync<Maritimo>("api/Vehiculos/GetNavio", Navio) ?? new();

        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){

            await JsRuntime.InvokeVoidAsync("alert", "Id innexistente");
            await OnClickCallback.InvokeAsync();

            return;
        }

        Navio = await responseSV.Content.ReadFromJsonAsync<Maritimo>() ?? new();

        if (Navio.Deuda == 0) {
            deuda = "Libre de deudas.";
        }else{
            deuda =  Convert.ToString(Navio.Deuda);
        }

        responseSV = await HttpClient.PostAsJsonAsync<Vehiculo>("api/Vehiculos/GetDueño", Navio) ?? new();

        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired){
            await JsRuntime.InvokeVoidAsync("alert", "Dueño innexistente");
            await OnClickCallback.InvokeAsync();

            return;
        }

        Dueño = await responseSV.Content.ReadFromJsonAsync<Cliente>() ?? new();
        Dueño.Contacto = Dueño.Contacto == "" ? "No posee información de contacto." : Dueño.Contacto;

        var coso = await authStateProvider.GetAuthenticationStateAsync();
        var emailDatos = coso.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
        var log = new LoginDTO();
        log.Email = emailDatos;
        var nuevoU = await HttpClient.PostAsJsonAsync<LoginDTO>("api/usuario/ObtenerUsuario", log); // ver ese coso
        var user = await nuevoU.Content.ReadFromJsonAsync<Usuario>();
        isSameClient = Dueño.Id == user?.Id;

        responseSV = await HttpClient.PostAsJsonAsync("api/Denuncias/GetCantidadDenunciasNavio", Navio) ?? new();
        if(!responseSV.IsSuccessStatusCode) {
            await JsRuntime.InvokeVoidAsync("alert", "Esto no debería de explotar,\nen serio, es imposible.");
        }
        cantidadDenuncias = await responseSV.Content.ReadFromJsonAsync<int>();
    }

    private async Task hideModal()
    {
        await modal.ShowAsync();
        await modal.HideAsync();

    }

    private async Task DenunciarPublicacion()
    {
        Denuncia denuncia = new Denuncia(){ VehiculoId = Navio.Id , EsNavio = true, ClienteId = Dueño.Id};
        var responseSV = await HttpClient.PostAsJsonAsync<Denuncia>("api/denuncia/CargarDenuncia", denuncia); 
        if (responseSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
        {
            await JsRuntime.InvokeVoidAsync("alert", "usted ya denunció esta publicación");
            return;            
        }
        await JsRuntime.InvokeVoidAsync("alert", "“Oh My Boat!” investigará su denuncia");        
    }

      private async Task EnviarOferta()

    {
        var parameters = new Dictionary<string, object>();           
        parameters.Add("vehiculoOfertado" , Navio);     
        parameters.Add("OnClickCallback",EventCallback.Factory.Create<MouseEventArgs>(this, hideModal)); 

        await modal.ShowAsync<Offers>(title: "Enviar Oferta", parameters: parameters);
    }
    private async Task BloquearUsuario(Cliente dueño)
    {
        if (dueño.Bloqueado){
            await JsRuntime.InvokeVoidAsync("alert", "Este usuario ya se encuentra bloqueado.");
        } else {
            var RespuestaSV = await HttpClient.PostAsJsonAsync("api/Cuenta/SwitchUserBlock", dueño);
            if (RespuestaSV.IsSuccessStatusCode)
            {
                StateHasChanged();
                await JsRuntime.InvokeVoidAsync("alert", "El usuario ha sido bloqueado.");
            } else {
                await JsRuntime.InvokeVoidAsync("alert", "El cliente no fue encontrado.");
            }
        }

    }
    private async Task EliminarPublicacion() {
        DenunciasDTO merequetengue = new() { EsNavio = true, VehiculoId = Navio.Id };
        var resp = await HttpClient.PostAsJsonAsync<DenunciasDTO>("api/denuncias/EliminarPublicacion", merequetengue);
        if (resp.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Se ha eliminado el navio con exito");
            await hideModal();
            await OnClickCallback.InvokeAsync();
            Navegador.NavigateTo(Navegador.Uri, true);
            StateHasChanged();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error de API (codigo {resp.StatusCode})");
            await OnClickCallback.InvokeAsync();
            Navegador.NavigateTo(Navegador.Uri, true);
        }

    }
    private async Task IgnorarDenuncias() {        
        await hideModal();
        StateHasChanged();
    }
}