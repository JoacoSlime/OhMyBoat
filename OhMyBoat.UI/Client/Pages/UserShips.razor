@page "/my-ships"
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject AuthenticationStateProvider authStateProvider;
@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@using System.Security.Claims
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "cliente")]


<AuthorizeView Roles="cliente">
    <Authorized>

        <h1>Mis Navios</h1>

        <Modal @ref="DetalleModal" IsScrollable="true" Size="ModalSize.Large" />
        <Modal @ref="modal" />

        @if (MisBarcos.Count == 0)
        {
            <h1> No tiene navíos registrados</h1>
        }
        else
        {
            <div class="d-flex flex-row flex-wrap">
            @foreach (var nav in MisBarcos)
            {
                <Card Class="me-4 mb-4" Style="width:auto;">
                    <img class="rounded-top p-3" src="@nav.base64imagen" alt="Imagen del vehículo" style="width:auto; height:25vh; max-width: 75vh"/>
                    <CardBody>
                        <CardTitle>Matrícula:</CardTitle>
                        <CardText>@nav.Matricula</CardText>
                        <CardTitle>Descripción:</CardTitle>
                        <CardText>@(nav.descripcion != "" ? nav.descripcion : "-")</CardText>
                        <CardTitle>Tipo:</CardTitle>
                        <CardText>@nav.Tipo</CardText>
                        <CardTitle>Dimensiones:</CardTitle>
                    </CardBody>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Eslora: @nav.Eslora</li>
                        <li class="list-group-item">Puntal: @nav.Puntal</li>
                        <li class="list-group-item">Deuda: @nav.Deuda</li>
                    </ul>
                    <CardBody>
                        <CardTitle>Deuda:</CardTitle>
                        <CardText>@nav.Deuda</CardText>
                        <CardTitle>Antiguedad:</CardTitle>
                        <CardText>@nav.Antiguedad</CardText>
                    </CardBody>
                    <CardFooter class="text-end">
                            <Button Color="ButtonColor.Primary" @onclick="(async ()=> await VerDetalles(nav.Id))">Detalles</Button>
                    </CardFooter>
                </Card>
            }
            </div>
        }

        <Button Color="ButtonColor.Primary" @onclick="CargarNavio">Publicar Navio</Button>
    </Authorized>
    <NotAuthorized>
       @{NavManager.NavigateTo("/",true);}
    </NotAuthorized>
</AuthorizeView>




@code {
    private Modal modal = default!;
    private Modal DetalleModal = default!;
    List<Maritimo> MisBarcos = new();


    protected override async Task OnInitializedAsync()
    {
        await RecargarLista();
    }


    private async Task RecargarLista()
    {
        var Aut = await authStateProvider.GetAuthenticationStateAsync();
        var Email = Aut.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;

        var respSV = await HttpClient.PostAsJsonAsync("api/vehiculos/ListarNaviosCliente", Email);
        MisBarcos = await respSV.Content.ReadFromJsonAsync<List<Maritimo>>() ?? new();
         StateHasChanged();
    }

    private async Task closeModal()
    {
        await modal.ShowAsync();       //https://github.com/vikramlearning/blazorbootstrap/issues/393
        await modal.HideAsync();
        await RecargarLista();
    }
    private async Task hideModal(){
        await DetalleModal.ShowAsync();
        await DetalleModal.HideAsync();
        await RecargarLista();
    }

    private async Task VerDetalles(int Id) {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, hideModal));
        parameters.Add("Id", Id);
        await DetalleModal.ShowAsync<DetalleNavioPropio>(title: "Detalles", parameters: parameters);
    }
    private async Task CargarNavio()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, closeModal));
        await modal.ShowAsync<PublishBoat>(title: "Cargar Navio", parameters: parameters);
    }
}