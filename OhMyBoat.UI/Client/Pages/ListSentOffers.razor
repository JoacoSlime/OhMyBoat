@page "/sent-offers"

@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject AuthenticationStateProvider authStateProvider;
@inject HttpClient HttpClient
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@inject IJSRuntime JsRuntime
@using System.Security.Claims
@inject NavigationManager NavManager

<AuthorizeView Roles="cliente">
    <Authorized>
        <Modal @ref="DetalleModal" IsScrollable="true" Size="ModalSize.ExtraLarge" />
        <h1>Mis Ofertas Enviadas</h1>
        @if (SentOffers.Count == 0)
        {
            <p>Usted no tiene ninguna oferta enviada aún</p>
        } else {
            <div class="d-flex flex-column p-4">
            @foreach (var vo in VehiculosOfertas ) {
                <div class="mb-4 p-4 border rounded">
                    <div class="d-flex flex-row align-items-center justify-content-between" Style="width:auto;">
                            <div class="d-flex flex-column justify-content-center text-center align-items-center">
                                <h1>Estado: @if (vo.Item1.EstadoOferta.Equals(EstadoOferta.Aceptada)) {
                                            <span class="text-success">Aceptada</span>
                                        } else if(vo.Item1.EstadoOferta.Equals(EstadoOferta.Enviada)){
                                            <span class="text-warning">Pendiente</span>
                                        } else if(vo.Item1.EstadoOferta.Equals(EstadoOferta.Cancelada)){
                                            <span class="text-danger">Cancelada</span>
                                        }
                                        else if (vo.Item1.EstadoOferta.Equals(EstadoOferta.Rechazada))
                                        {
                                        <span class="text-danger">Rechazada</span>
                                        }
                                        else
                                        {
                                            <span class="text-info">@vo.Item1.EstadoOferta</span>
                                        }
                                        </h1>
                                <Button Color="ButtonColor.Primary" Size="ButtonSize.Large" class="position-relative end-0" 
                                    @onclick="(async () => await (VerOferta(vo.Item1)))">Ver detalle
                                </Button>
                            </div>
                        <div>
                            <Card Style="width:20vw;">
                                <CardHeader>Ofreciste:</CardHeader>
                                <img src="@vo.Item3.base64imagen" alt="placeholder" />
                                <CardBody>
                                    @if (@vo.Item3 is Maritimo){
                                        var m = @vo.Item3 as Maritimo;
                                        <CardTitle Class="mb-2 text-muted">@m?.Tipo</CardTitle>
                                    }else{
                                        @if(@vo.Item3 is Terrestre){
                                            var t = @vo.Item3 as Terrestre;
                                            <CardTitle Class="mb-2 text-muted">@t?.Tipo</CardTitle>
                                        }
                                    }
                                </CardBody>
                                <ul class="list-group list-group-flush">
                                    @if (@vo.Item3 is Maritimo){
                                        var m = @vo.Item3 as Maritimo;
                                        <li class="list-group-item">Eslora: @m?.Eslora</li>
                                        <li class="list-group-item">Puntal: @m?.Puntal</li>
                                        <li class="list-group-item">Manga: @m?.Manga</li>
                                    }else{
                                        @if (@vo.Item3 is Terrestre){
                                            var t = @vo.Item3 as Terrestre;
                                            <li class="list-group-item">Marca: @t?.Marca</li>
                                            <li class="list-group-item">Modelo: @t?.Modelo</li>
                                            <li class="list-group-item">Año: @t?.Anio</li>
                                        } 
                                    }
                                </ul>
                            </Card>
                        </div>
                        <div>
                            <Icon Name="IconName.ArrowRight" Size="IconSize.x1"></Icon>
                        </div>
                        <div>
                            <Card Style="width:20vw;">
                                <CardHeader>A cambio de:</CardHeader>
                                <img src="@vo.Item2.base64imagen" alt="placeholder" />
                                <CardBody>
                                    @if (@vo.Item2 is Maritimo){
                                        var m = @vo.Item2 as Maritimo;
                                        <CardTitle Class="mb-2 text-muted">@m?.Tipo</CardTitle>
                                    }else{
                                        @if(@vo.Item2 is Terrestre){
                                            var t = @vo.Item2 as Terrestre;
                                            <CardTitle Class="mb-2 text-muted">@t?.Tipo</CardTitle>
                                        }
                                    }
                                </CardBody>
                                <ul class="list-group list-group-flush">
                                    @if (@vo.Item2 is Maritimo){
                                        var m = @vo.Item2 as Maritimo;
                                        <li class="list-group-item">Eslora: @m?.Eslora</li>
                                        <li class="list-group-item">Puntal: @m?.Puntal</li>
                                        <li class="list-group-item">Manga: @m?.Manga</li>
                                    }else{
                                        @if (@vo.Item2 is Terrestre){
                                            var t = @vo.Item2 as Terrestre;
                                            <li class="list-group-item">Marca: @t?.Marca</li>
                                            <li class="list-group-item">Modelo: @t?.Modelo</li>
                                            <li class="list-group-item">Año: @t?.Anio</li>
                                        } 
                                    }
                                </ul>
                            </Card>
                        </div>
                    </div>
                </div>
            }
            </div>
            }
    </Authorized>
    <NotAuthorized>
       @{NavManager.NavigateTo("/",true);} 
    </NotAuthorized>
</AuthorizeView>

@code {

/*
    
    Ofreciste:                                      A cambio de:

    (foto vehiculoEnviaOferta)           --->       (foto vehiculoRecibeOferta) 
    TipoVehiculo, Marca, Modelo, Año                TipoVehiculo, Marca, Modelo, Año

   [VER DETALLE OFERTA]

*/

    public Modal DetalleModal = default!;

    List<Oferta> SentOffers = new();

    List<(Oferta,Vehiculo,Vehiculo)> VehiculosOfertas = new();

    Vehiculo VehiculoEnviado = new();
    Vehiculo VehiculoRecibido = new();
    Vehiculo envia = new();
    Vehiculo recibe = new();

    protected override async Task OnInitializedAsync()
    {
        await RecargarLista();
    }

    private async Task RecargarLista()
    {
        var Aut = await authStateProvider.GetAuthenticationStateAsync();
        var MyEmail = Aut.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;


        Usuario us = new Usuario() {Email = MyEmail};
        var respSV = await HttpClient.PostAsJsonAsync("api/Oferta/ListarOfertasEnviadas", us);

        SentOffers = await respSV.Content.ReadFromJsonAsync<List<Oferta>>() ?? new();

        VehiculosOfertas.Clear();

        foreach (Oferta o in SentOffers)
        {

            Vehiculo VehiculoRecibido = new Vehiculo() { Id = o.ID_VehiculoRecibeOferta};
            Vehiculo recibe;

            if (o.EsNavioRecibe){
                var resp1 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetNavio", VehiculoRecibido) ?? new();
                if (resp1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Matricula del navío recibido es innexistente");
                    return;
                }
                recibe = await resp1.Content.ReadFromJsonAsync<Maritimo>() ?? new();
            }else{
                var resp1 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetVehiculo", VehiculoRecibido) ?? new();
                if (resp1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Matricula del terrestre recibido es innexistente");
                    return;
                }
                recibe = await resp1.Content.ReadFromJsonAsync<Terrestre>() ?? new();
            }

            Vehiculo VehiculoEnviado = new Vehiculo() { Id = o.ID_VehiculoEnviaOferta};
            Vehiculo envia;

            if (o.EsNavioEnvia){
                var resp1 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetNavio", VehiculoEnviado) ?? new();
                if (resp1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Matricula navio enviado es innexistente");
                    return;
                }
                envia = await resp1.Content.ReadFromJsonAsync<Maritimo>() ?? new();
            }else{
                var resp1 = await HttpClient.PostAsJsonAsync("api/vehiculos/GetVehiculo", VehiculoEnviado) ?? new();
                if (resp1.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Matricula del terrestre enviado es innexistente");
                    return;
                }
                envia = await resp1.Content.ReadFromJsonAsync<Terrestre>() ?? new();
            }
            
            VehiculosOfertas.Add((o,recibe,envia));
            
        }

        StateHasChanged();
    }

    private async Task hideModal(){
        await DetalleModal.ShowAsync();
        await DetalleModal.HideAsync();
        await RecargarLista();
    }

    private async Task VerOferta(Oferta ofert) {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnClickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, hideModal));
        parameters.Add("Id_Oferta", ofert.Id);
        parameters.Add("modal", DetalleModal);
        await DetalleModal.ShowAsync<DetalleOferta>(title: "Detalles", parameters: parameters);
    }
}
