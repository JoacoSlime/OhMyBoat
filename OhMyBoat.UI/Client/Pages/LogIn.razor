@page "/login"
@layout LoginLayout
@inject NavigationManager Navegador

@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticacationProvider
@using OhMyBoat.UI.Client.Extensions
@using OhMyBoat.UI.Shared
@using OhMyBoat.UI.Shared.Entidades
@using System.Security.Cryptography
@using System.Text
@inject IJSRuntime JsRuntime


<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @{Navegador.NavigateTo("",true);}
            <h1>No.</h1>
        </Authorized>
        <NotAuthorized>
            <div class="d-flex flex-column justify-content-center m-5 p-5 border">

                <div class="mb-3 text-center">
                    <a href="/"><img src="LogoColorTransp.jpg" style="width: max-content; height: 25vh;"></a>
                    <h1>Iniciar Sesión</h1>
                </div>

                <div class="mb-3">
                    <label><h3>Correo</h3></label>
                    <input @bind="email" class="form-control" />
                </div>

                <div class="mb-5">
                    <label><h3>Contraseña</h3></label>
                    <input @bind="contra" class="form-control" type="password"/>
                </div>

                <div class=" d-flex justify-content-center">
                    <button @onclick="iniciarSesion" class="btn btn-primary btn-lg">Login</button>
                </div>

            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


@code {
    private string contra = "";
    private string email = "";
    


    public async Task iniciarSesion()
    {     
        if (email == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese el mail.");
            return;
        }
        if (contra == "")
        {
            await JsRuntime.InvokeVoidAsync("alert", "Por favor ingrese la contraseña");
            return;
        }
        
        LoginDTO login = new LoginDTO();
        login.Password = Utils.HashWithSha256(contra);
        login.Email = email;
        
        var loginRespones = await HttpClient.PostAsJsonAsync<LoginDTO>("api/cuenta/Login", login);
        try
        {
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var sesionUsuario = await loginRespones.Content.ReadFromJsonAsync<SesionDTO>();
                var autenticacionEX = (AuthenticationExtension)authenticacationProvider;
                await autenticacionEX.ActualizarEstadoAutenticacion(sesionUsuario);
                Navegador.NavigateTo("/");
            }
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.VariantAlsoNegotiates){ // bloqueado
                        await JsRuntime.InvokeVoidAsync("alert", "El usuario esta bloqueado, Comuniquese con el jefe de OMB!");
            }
            if (loginRespones.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired) // ta mal lo que pusiste
            {
                await JsRuntime.InvokeVoidAsync("alert", "Email o contraseña incorrectos");
            }
        }
        catch(Exception a)
        {
            await JsRuntime.InvokeVoidAsync("alert", a.ToString());
        }


    }
}
