@page "/sign_in_cliente"
@using OhMyBoat.UI.Shared.Entidades;

<html>
    <h1>Crear cuenta</h1>
    <p>Por favor complete sus datos.</p>
    <hr>

    <label for="email"><b>E-mail</b></label>
    <input type="text" placeholder="Ingrese Email" name="email" required asp-for="Email"> 
    <p></p>
    <input @value="Email" />
    
    
    <p></p>
    <label for="nombre"><b>Nombre Completo</b></label>
    <div id="nombre-contains"> Ingrese su nombre y apellido completos.</div>
    <input type="text" placeholder="Nombre Completo" name="nombre" required <!--@bind="Nombre"-->> 
    <p></p>
    <input @value="Nombre" />
    
<!--
    <input id="txtWord" name="txtWord" placeholder="Enter your text" 
    value ="@value" @onchange="onChange" @onkeyup="Enter" />
<input @bind="cliente.Email" />
    <input @value="E_mail" />

    o sino

    <input @bind="Username" />

    o

    <input @bind-value="Username" />

    o

    <InputText @bind-Value="Username" />

    Supuestamente se podria hacer el binding tmb con asp-for="Email" como puse en Email

-->
    
    <div id="password-constraints"> La contraseña debe contener al menos 8 caracteres.</div>
    <div id="password-constraints_2"> Además, debe contener al menos un caracter especial, una mayúscula y dos números.</div>
    <label for="psw"><b>Contraseña</b></label>
    <input type="password" placeholder="Ingrese Contraseña" name="psw" required>
    <input @value="Password"
    <p></p>

<!--
    <label for="psw-repeat"><b>Repita su contraseña</b></label>
    <input type="password" placeholder="Repita Contraseña" name="psw-repeat" required>
    <input @value="Password" />
    
    En realidad, no es necesario que repita la contraseña según la HU
--> 

    <p></p>
    <label for="fecha de nacimiento"><b>Seleccione su fecha de nacimiento</b></label>
    <input type="datetime-local" id="Test_DatetimeLocal">
    <input @value="FechaNac" />

    <button class="btn btn-primary" type="submit" >Registrarse"> </button>
</html>

@code{
    static bool IsMayusc(char c){
        return (c >= 'A' && c <= 'Z');
    }
    static bool HasNum(string password){
        char[] characters = password.ToCharArray();
        int numCounter = 0;
        foreach (char c in characters){
            if (char.IsNumber(c)){
                numCounter ++;
            }
        }
        return numCounter > 1;
    }
    static bool IsSymbol(char c){
        String specials = "!?¿¡#$%&/=+-*_@";
        return specials.Contains(c);
    }
    static bool IsLong(string password){
        return password.Length >= 8;
    }
    static bool IsValidPassword(string password){
        return
        IsLong(password) && 
        HasNum(password) &&
        password.Any(c => IsMayusc(c)) && 
        password.Any(c => IsSymbol(c));
    }
    private DateTime FechaNac { get; set; }
    private DateTime fechaNow = DateTime.Now;
    private TimeSpan EighteenYearSpan = new TimeSpan(6574,5, 0, 0, 0);

    @if (DateTime.Substraction(fechaNow, FechaNac) == EighteenYearSpan) {

        public bool MayorDeEdad { get ; set ; } = true; 
        public string Email { get; set; } ="";
        public string Nombre { get; set; } ="";
        public string Password { get; set; } ="";

        @if IsValidPassword(Password){
            private Cliente cliente = new Cliente();
        }//else {mensaje de que la contraseña es debil}

    }//else {mensaje de que no es mayor de edad}

}