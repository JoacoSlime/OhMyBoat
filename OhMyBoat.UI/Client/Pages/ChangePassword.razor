@using Microsoft.JSInterop;
@using OhMyBoat.UI.Shared.Entidades;
@using OhMyBoat.UI.Shared;
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;
@inject NavigationManager Navegador;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authStateProvider;
@using System.Security.Claims

<div class="d-flex flex-column">

    <div class="mb-3">
        <label>Ingrese su contraseña actual</label>
        <input @bind="contraActual" class="form-control" type="password" />
    </div>
    <div class="mb-3">
        <label>Ingrese la contraseña nueva</label>
        <input @bind="contraNueva1" class="form-control" type="password" />
    </div>

    <div class="mb-3">
        <label>Repita su contraseña</label>
        <input @bind="contraNueva2" class="form-control" type="password" />
    </div>

    <div class="mb-3">
        <button @onclick="OnClick" class="btn btn-primary">Aceptar</button>
    </div>
    </div>

@code {
    private string contraActual { get; set; } = "";
    private string contraNueva1 { get; set; } = "";
    private string contraNueva2 { get; set; } = "";
    private string hashnuevo { get; set; } = "";
    private string hashviejo { get; set; } = "";

    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    private async Task OnClick(MouseEventArgs e)  {


        if(contraNueva1.CompareTo(contraNueva2)!=0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Las contraseñas no coinciden");
            return;
        }
        if (!Utils.IsValidPassword(contraNueva1))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Tu contraseña no es lo suficientemente segura.\nComo mínimo debe tener 8 caracteres, y contener al menos un caracter especial, una mayúscula y dos números");
            return;
        }
        RecuDTO datos = new();
        var coso = await authStateProvider.GetAuthenticationStateAsync();
        var emailDatos = coso.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value;
        datos.Email = emailDatos;
        hashviejo = Utils.HashWithSha256(contraActual);
        hashnuevo = Utils.HashWithSha256(contraNueva1);
        datos.HashNuevo = hashnuevo;
        datos.HashViejo = hashviejo;

        var RespuestaSV = await HttpClient.PostAsJsonAsync<RecuDTO>("api/cuenta/RecuperarContra", datos);

        if (RespuestaSV.IsSuccessStatusCode)
        {
            Navegador.NavigateTo("/");
            await OnClickCallback.InvokeAsync(e);
        }
        
        if (RespuestaSV.StatusCode == System.Net.HttpStatusCode.NetworkAuthenticationRequired)
            await JsRuntime.InvokeVoidAsync("alert", "La contraseña es la misma que la anterior");
        if (RespuestaSV.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            await JsRuntime.InvokeVoidAsync("alert", "La contraseña anterior es incorrecta");
       
    }
}
