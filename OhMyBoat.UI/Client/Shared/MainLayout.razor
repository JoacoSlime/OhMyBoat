@inherits LayoutComponentBase;
@using Microsoft.AspNetCore.Components.Authorization;
@using OhMyBoat.UI.Client.Extensions;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;
@inject IJSRuntime JsRuntime;
@using OhMyBoat.UI.Client.Pages

<Offcanvas @ref="offcanvas" />
<div class="page">
    <div class="d-flex flex-column sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <button class="btn btn-secondary ms-2" @onclick=ShowNotifications><Icon Name="IconName.EnvelopeFill" Size="IconSize.x4"></Icon></button>
                        @if (isOnAccountPage) {
                            <button class="btn account-button ms-2" @onclick=ShowAccount><Icon Name="IconName.PersonFill" Size="IconSize.x4"></Icon></button>
                        } else {
                            <LogOut class="ms-2"/>
                        }
                    </Authorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>



@code {
    private Offcanvas offcanvas = default!;
    private bool isOnAccountPage { get; set; }
    private bool showAccount { get; set; }
    
    protected override void OnParametersSet()
    {
        isOnAccountPage = (this.Body?.Target as RouteView)?.RouteData?.PageType?.ToString() != "OhMyBoat.UI.Client.Pages.Account";
        showAccount = false;
    }
    private async Task HideOffcanvas() {
        await offcanvas.ShowAsync();
        await offcanvas.HideAsync();
    }

    private async Task ShowAccount()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, HideOffcanvas));
        await offcanvas.ShowAsync<AccountPopUp>(title: "Mi Cuenta", parameters: parameters);
    }

    private async Task ShowNotifications()
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, HideOffcanvas));
        await offcanvas.ShowAsync<Notifications>(title: "Notificaciones", parameters: parameters);
    }
}